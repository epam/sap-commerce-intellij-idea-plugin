/*
 * This file is part of "SAP Commerce Developers Toolset" plugin for IntelliJ IDEA.
 * Copyright (C) 2019-2024 EPAM Systems <hybrisideaplugin@epam.com> and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

{
  parserClass="com.intellij.idea.plugin.hybris.flexibleSearch.FlexibleSearchParser"
  parserUtilClass="com.intellij.idea.plugin.hybris.flexibleSearch.FlexibleSearchParserUtils"
  
  extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

  psiClassPrefix="FlexibleSearch"
  psiImplClassSuffix="Impl"
  psiPackage="com.intellij.idea.plugin.hybris.flexibleSearch.psi"
  psiImplPackage="com.intellij.idea.plugin.hybris.flexibleSearch.psi.impl"
  psiImplUtilClass="com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchPsiUtil"

  elementTypeHolderClass="com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes"
  elementTypeClass="com.intellij.idea.plugin.hybris.flexibleSearch.FlexibleSearchElementType"
  tokenTypeClass="com.intellij.idea.plugin.hybris.flexibleSearch.FlexibleSearchTokenType"

  classHeader="generatedFilesHeader.txt"
  generateTokenAccessors(".*_name")=false
  extends(".*_expression")=expression

  implements("column_ref_y_expression")="com.intellij.idea.plugin.hybris.psi.FoldablePsiElement"
  implements("column_ref_expression")="com.intellij.idea.plugin.hybris.psi.FoldablePsiElement"
  implements("from_table")="com.intellij.idea.plugin.hybris.psi.FoldablePsiElement"
  implements("select_core_select")="com.intellij.idea.plugin.hybris.psi.FoldablePsiElement"

  generate=[java='21']

  tokens = [

        NUMERIC_LITERAL             = 'regexp:(([0-9]+(\.[0-9]*)?|\.[0-9]+)(E(\+|-)?[0-9]+)?)|(0x[0-9a-f]+)'
        BOOLEAN_LITERAL             = 'regexp:((true)|(false))'

        // Manually tweaked in the flex file to handle literals without the closing character.
        SINGLE_QUOTE_STRING_LITERAL = "regexp:X?'(''|[^'])*'"
        DOUBLE_QUOTE_STRING_LITERAL = "regexp:X?\"(\"\"|[^\"])*\""
        BACKTICK_LITERAL            = "regexp:`(``|[^`])*`"

        // Some approximation of what's actually allowed. This doesn't seem to be defined anywhere.
        IDENTIFIER      = 'regexp:([:letter:]|_)([:letter:]|[:digit:]|_)*'
        LINE_COMMENT    = 'regexp:--[^r\n]*'
        NAMED_PARAMETER = 'regexp:\?\w+' // Simple regexp for Live Preview, this is tweaked in the flex file.
        COMMENT         = 'regexp:/\*.*\*/' // Simple regexp for Live Preview, this is tweaked in the flex file.
//        NAMED_PARAMETER=[?][:jletterdigit:]+
//        COMMENT="/*" ( ([^"*"]|[\r\n])* ("*"+ [^"*""/"] )? )* ("*" | "*"+"/")?

        QUESTION_MARK       = '?'
        EXCLAMATION_MARK    = '!'
        LBRACKET            = '['
        RBRACKET            = ']'
        LBRACE              = '{'
        RBRACE              = '}'
        LDBRACE             = "{{"
        RDBRACE             = "}}"
        LPAREN              = '('
        RPAREN              = ')'
        AMP                 = '&'
        BAR                 = '|'
        COMMA               = ','
        CONCAT              = '||'
        DIV                 = '/'
        DOT                 = '.'
        EQ                  = '='
        EQEQ                = '=='
        GT                  = '>'
        GTE                 = '>='
        LT                  = '<'
        LTE                 = '<='
        MINUS               = '-'
        MOD                 = '%'
        NOT_EQ              = '!='
        PLUS                = '+'
        SEMICOLON           = ';'
        COLON               = ":"
        SHL                 = '<<'
        SHR                 = '>>'
        STAR                = '*'
        TILDE               = '~'
        UNEQ                = '<>'
        OUTER_JOIN          = ':o'

        FULL                = 'FULL'

        TRUE                = 'TRUE'
        FALSE               = 'FALSE'
  ]
}

root ::= statement

private statement ::= (select_statement) { name="statement" }

type_name ::= name ( '(' signed_number ')' | '(' signed_number ',' signed_number ')' )?

expression ::=
  mysql_function_expression
  | or_expression
  | and_expression
  | case_expression
  | exists_expression
  | in_expression
  | isnull_expression
  | like_expression
  | cast_expression
  | function_call_expression
  | equivalence_group
  | comparison_expression
  | bit_expression
  | mul_expression
  | concat_expression
  | unary_expression
  | literal_expression
  | column_ref_y_expression
  | subquery_paren_expression
  | column_ref_expression
  | paren_expression

mysql_function_expression ::= INTERVAL expression IDENTIFIER

// "The precedence of the BETWEEN operator is the same as the precedence as operators == and != and LIKE and groups left to right."
private equivalence_group ::= equivalence_expression | between_expression

and_expression ::= expression AND expression
or_expression ::= expression OR expression
equivalence_expression ::= expression ( '==' | '=' | '!=' | '<>' | IS NOT?) expression
comparison_expression ::= expression ( '<' | '<=' | '>' | '>=' ) expression
bit_expression ::= expression ( '<<' | '>>' | '&' | '|' ) expression
mul_expression ::= expression ( '*' | '/' | '%' ) expression
concat_expression ::= expression '||' expression
unary_expression ::= expression ('-' | '+' | '~' | NOT !IN) expression
literal_expression ::= literal_value | bind_parameter
paren_expression ::= '(' (expression)* ')' {pin=1}
subquery_paren_expression ::= '(' from_clause_subqueries_statement ')'
between_expression ::= expression NOT? BETWEEN expression AND expression
cast_expression ::= CAST '(' expression AS type_name ')' {pin=1}
case_expression ::= CASE expression? ( WHEN expression THEN expression )+ ( ELSE expression )? END {pin=1}
like_expression ::= expression NOT? ( LIKE | REGEXP | MATCH ) expression ( ESCAPE expression )?
isnull_expression ::= expression IS NOT? NULL
in_expression ::=  expression NOT? IN '(' ( expression_in_subquery ) ')'
exists_expression ::= NOT? exists_expression_name from_clause_subqueries_statement ')' {pin=2}
function_call_expression ::= function_call_expression_name ( ( DISTINCT )? expression ( ',' expression )* | '*' )? ')' {pin=1}
column_ref_y_expression ::= '{' column_ref_y_expression_other '}' {
    pin=1
}
private column_ref_y_expression_other ::= (selected_table_name column_separator)? y_column_name y_column_localized_name? column_outer_join_name? {
    recoverWhile=column_ref_y_expression_recover
}
private column_ref_y_expression_recover ::= !'}'
// We may not have { } in case of Combined SELECT with table alias
/*
SELECT x.PK FROM (
    {{
        SELECT {PK} as PK FROM {Page}
        WHERE {Page.PUBLICATION} LIKE 6587084167216798848
    }}
) x
 */
column_ref_expression ::=
 aliased_column_ref_expression
 | column_name

private aliased_column_ref_expression ::= selected_table_name column_separator column_name {pin=2}

private exists_expression_name ::= EXISTS '('
private function_call_expression_name ::= function_name '('
private expression_in_subquery ::= bind_parameter (',' bind_parameter)* | expression ( ',' expression )* | from_clause_subqueries_statement

bind_parameter ::= NUMBERED_PARAMETER | (NAMED_PARAMETER ( '.' ext_parameter_name)*)

private literal_value ::=
  signed_number
  | string_literal // X marks a blob literal
  | BOOLEAN_LITERAL
  | NULL

select_statement ::= select_core_select (compound_operator select_core_select)* order_clause? limit_clause?

limit_clause ::= LIMIT expression ( ( OFFSET | ',' ) expression )? {
  pin=1
  recoverWhile=limit_clause_recover
}
private limit_clause_recover ::= !(<<eof>> | ')' | '}}')

order_clause ::= order_clause_literal ordering_term ( ',' ordering_term )* {
    pin=1
    recoverWhile=order_clause_recover
}
private order_clause_recover ::= !(<<eof>> | LIMIT | ')' | '}}')
private order_clause_literal ::= ORDER BY

select_core_select ::= SELECT ( DISTINCT | ALL )? result_columns from_clause (where_clause)? (group_by_clause)? {pin=1}

group_by_clause ::= group_by_literal expression ( ',' expression )* ( having_clause )? {
    pin=1
    recoverWhile=group_by_clause_recover
}
private group_by_clause_recover ::= !(<<eof>> | HAVING | order_clause_literal | LIMIT | ')' | '}}')
having_clause ::= HAVING expression {
    pin=1
    recoverWhile=having_clause_recover
}
private having_clause_recover ::= !(<<eof>> | LIMIT | order_clause_literal | ')' | '}}')
private group_by_literal ::= GROUP BY

where_clause ::= WHERE expression {
    pin=1
    recoverWhile=where_clause_recover
}
private where_clause_recover ::= !(<<eof>> | group_by_literal | order_clause_literal | LIMIT | '}}')

from_clause ::= FROM from_clause_expr ( join_operator from_clause_expr )* {pin=1}

from_clause_expr ::=
  y_from_clause
  | from_clause_select

y_from_clause ::= '{' from_clause_simple '}' {
    pin=1
    extends=from_clause_expr
}
from_clause_select ::= ((from_clause_select_query ( ( AS )? table_alias_name)?) | from_clause_subqueries) join_constraint? {
    extends=from_clause_expr
}

from_clause_select_query ::= '(' &(SELECT) from_query_greedy ')' {pin=2}

private from_query_greedy ::= select_statement {
    recoverWhile=from_query_greedy_recover
}
private from_query_greedy_recover ::= !')'

from_clause_simple ::= table_or_subquery ( join_operator table_or_subquery join_constraint? )*
from_clause_subqueries ::= '(' from_clause_subqueries_statement ')' ( ( AS )? table_alias_name)?

private from_clause_subqueries_statement ::= ( select_subquery_combined compound_operator? )*

result_columns ::= result_column ( following_result_column )* {
    recoverWhile=result_columns_recover
}
private following_result_column ::= ',' result_column {pin=1}
private result_columns_recover ::= !(<<eof>> | FROM)

table_or_subquery ::= from_table | select_subquery | '(' table_or_subquery ')'

from_table ::= defined_table_name ( ( AS )? table_alias_name )?

select_subquery ::= '(' "{{" &(SELECT) subquery_greedy "}}" ')' ( ( AS )? table_alias_name)? {
    pin=3
}
select_subquery_combined ::= "{{" &(SELECT) subquery_greedy "}}" {
    pin=2
    recoverWhile=select_subquery_combined_recover
}
private select_subquery_combined_recover ::= !(')' | compound_operator)
private subquery_greedy ::= select_statement {
  recoverWhile=y_subquery_greedy_recover
}
private y_subquery_greedy_recover ::= !"}}"

result_column ::=
  '*'
  | '{' selected_table_name column_separator '*' '}'
  | selected_table_name column_separator '*'
  | expression ( ( AS )? column_alias_name )?
  {
    methods=[getPresentationText]
    recoverWhile=result_column_recover
  }
private result_column_recover ::= !(<<eof>> | FROM | ',')

join_operator ::= ',' | ( LEFT OUTER? | INNER | RIGHT )? JOIN

join_constraint ::= join_constraint_on | join_constraint_using
private join_constraint_on ::= ON expression {pin=1}
private join_constraint_using ::= USING '(' column_name ( ',' column_name )* ')' {pin=1}

ordering_term ::= expression ( ASC | DESC )?

compound_operator ::= UNION ALL?

ext_parameter_name ::= ORDER | IDENTIFIER
column_outer_join_name ::= OUTER_JOIN
column_alias_name ::= name {
    implements="com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchPsiNamedElement"
    methods=[getName setName getNameIdentifier]
}
private y_column_localized_name ::= '[' column_localized_name ']' {pin=1}
column_localized_name ::= IDENTIFIER {
    mixin="com.intellij.idea.plugin.hybris.flexibleSearch.psi.impl.FlexibleSearchColumnLocalizedNameMixin"
}
table_alias_name ::= name {
    implements="com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchPsiNamedElement"
    methods=[getName setName getNameIdentifier getTable]
}
selected_table_name ::= IDENTIFIER | BACKTICK_LITERAL {
    mixin="com.intellij.idea.plugin.hybris.flexibleSearch.psi.impl.FlexibleSearchSelectedTableNameMixin"
    implements="com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchPsiNamedElement"
    methods=[getName setName getNameIdentifier getTableAliases]
}
defined_table_name ::= (ORDER | IDENTIFIER) ('!' | '*')? {
    pin=1
    mixin="com.intellij.idea.plugin.hybris.flexibleSearch.psi.impl.FlexibleSearchTableNameMixin"
    methods=[getTableName getTableAlias]
}
y_column_name ::= ORDER | IDENTIFIER {
    mixin="com.intellij.idea.plugin.hybris.flexibleSearch.psi.impl.FlexibleSearchYColumnNameMixin"
    methods=[getTableToAlias getTableAliases]
}
column_name ::= ORDER | IDENTIFIER {
    mixin="com.intellij.idea.plugin.hybris.flexibleSearch.psi.impl.FlexibleSearchColumnNameMixin"
    implements="com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchPsiNamedElement"
    methods=[getName setName getNameIdentifier]
}
function_name ::= IDENTIFIER

signed_number ::= ( '+' | '-' )? NUMERIC_LITERAL
column_separator ::= DOT | COLON
private name ::= IDENTIFIER | BRACKET_LITERAL | BACKTICK_LITERAL | string_literal
private string_literal ::= SINGLE_QUOTE_STRING_LITERAL | DOUBLE_QUOTE_STRING_LITERAL

