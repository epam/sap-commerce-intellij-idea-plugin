{
    parserClass="com.intellij.idea.plugin.hybris.polyglotQuery.PolyglotQueryParser"
    parserUtilClass="com.intellij.idea.plugin.hybris.polyglotQuery.PolyglotQueryParserUtils"

    extends="com.intellij.extapi.psi.ASTWrapperPsiElement"

    psiClassPrefix="PolyglotQuery"
    psiImplClassSuffix="Impl"
    psiPackage="com.intellij.idea.plugin.hybris.polyglotQuery.psi"
    psiImplPackage="com.intellij.idea.plugin.hybris.polyglotQuery.psi.impl"
    psiImplUtilClass="com.intellij.idea.plugin.hybris.polyglotQuery.psi.PolyglotQueryPsiUtil"

    elementTypeHolderClass="com.intellij.idea.plugin.hybris.polyglotQuery.psi.PolyglotQueryTypes"
    elementTypeClass="com.intellij.idea.plugin.hybris.polyglotQuery.PolyglotQueryElementType"
    tokenTypeClass="com.intellij.idea.plugin.hybris.polyglotQuery.PolyglotQueryTokenType"

    classHeader="generatedFilesHeader.txt"

    implements("type_key")="com.intellij.idea.plugin.hybris.psi.FoldablePsiElement"
    implements("attribute_key")="com.intellij.idea.plugin.hybris.psi.FoldablePsiElement"
    implements("where_clause")="com.intellij.idea.plugin.hybris.psi.FoldablePsiElement"
    implements("order_by")="com.intellij.idea.plugin.hybris.psi.FoldablePsiElement"

    generate=[java='21']
    generateTokenAccessors(".*_name")=false

    tokens = [
        IDENTIFIER      = 'regexp:([:letter:])([:letter:]|[:digit:]|_)*'
        LINE_COMMENT    = 'regexp:--[^r\n]*'
        COMMENT         = 'regexp:/\*.*\*/' // Simple regexp for Live Preview, this is tweaked in the flex file.

        QUESTION_MARK       = '?'
        LBRACKET            = '['
        RBRACKET            = ']'
        LBRACE              = "{"
        RBRACE              = "}"
        AMP                 = '&'
        EQ                  = '='
        GT                  = '>'
        GTE                 = '>='
        LT                  = '<'
        LTE                 = '<='
        UNEQ                = '<>'
        LPAREN              = '('
        RPAREN              = ')'
        DOT                 = '.'
        COMMA               = ','
    ]
}

root ::= statement
private statement ::= (query)*

//pin -> if GET is written in file -> psi element is pinned as MVP of a group(group == instance of java class)
query ::= get_query {
    recoverWhile=query_recover
}
private query_recover ::= !(<<eof>> | GET)
private get_query ::= GET type_key where_clause? order_by? {pin=1}

type_key ::= '{' type_key_name '}' {
    pin=1
    recoverWhile=type_key_recover
    methods=[getTypeName]
}
private type_key_recover::= !(<<eof>> | order_clause_literal | GET | WHERE)

order_by ::= order_clause_literal order_key ( ',' order_key )* {
    pin=1
    recoverWhile=order_by_clause_recover
}
private order_by_clause_recover::= !(<<eof>> | GET)

order_key ::= attribute_key (ASC | DESC)?
private order_clause_literal ::= ORDER BY

where_clause ::= WHERE expr_or {
    pin=1
    recoverWhile=where_clause_recover
}
private where_clause_recover ::= !(<<eof>> | order_clause_literal | GET)

expr_or ::= expr_and ( OR expr_and )*
expr_and ::= expr_atom ( AND expr_atom )*
expr_atom ::=
    attribute_key cmp_operator bind_parameter
    | attribute_key null_operator
    | '(' expr_or ')'

bind_parameter ::= '?' IDENTIFIER ('.' IDENTIFIER)* {pin=1}
null_operator ::= IS (NOT)? NULL {pin=1}
cmp_operator ::= '=' | '<>' | '>' | '<' | '>=' | '<='

attribute_key ::= '{' attribute_key_name ( localized )? '}' {
    pin=1
    recoverWhile=attribute_key_recover
}
private attribute_key_recover ::= !(<<eof>>  | '&' | ',' | cmp_operator | null_operator | ')' | order_clause_literal | GET | ASC | DESC)

localized ::= '[' localized_name ']' {
    pin=1
    recoverWhile=localized_recover
}
private localized_recover::= !('}')

localized_name ::= IDENTIFIER {
    recoverWhile=localized_name_recover
    mixin="com.intellij.idea.plugin.hybris.polyglotQuery.psi.impl.PolyglotQueryLocalizedNameMixin"
}
private localized_name_recover ::= !(']')

type_key_name ::= IDENTIFIER {
    recoverWhile=type_key_name_recover
    mixin="com.intellij.idea.plugin.hybris.polyglotQuery.psi.impl.PolyglotQueryTypeKeyNameMixin"
    methods=[getTypeName]
}
private type_key_name_recover ::= !('}')

attribute_key_name ::= IDENTIFIER {
    recoverWhile=attribute_key_name_recover
    mixin="com.intellij.idea.plugin.hybris.polyglotQuery.psi.impl.PolyglotQueryAttributeKeyNameMixin"
    methods=[getTypeName]
}
private attribute_key_name_recover ::= !('[' | '}')
