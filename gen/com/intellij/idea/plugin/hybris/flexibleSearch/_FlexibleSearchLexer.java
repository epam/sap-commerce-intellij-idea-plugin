/*
 * This file is part of "SAP Commerce Developers Toolset" plugin for IntelliJ IDEA.
 * Copyright (C) 2019-2025 EPAM Systems <hybrisideaplugin@epam.com> and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: flexibleSearch.flex

package com.intellij.idea.plugin.hybris.flexibleSearch;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;
import java.util.Deque;
import java.util.ArrayDeque;

import static com.intellij.idea.plugin.hybris.flexibleSearch.psi.FlexibleSearchTypes.*;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;


public class _FlexibleSearchLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int LOCALIZED_STATE = 2;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1, 1
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\41\u2000\1\u1100\1\u3000\1\u3100\1\u1100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u3600\1\u3700\1\u3800\1\u3900\1\u3a00\1\u1100"+
    "\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u4100\1\u4200"+
    "\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800\1\u4900\1\u4a00"+
    "\1\u4b00\1\u4c00\1\u4d00\1\u4e00\1\u2000\1\u4f00\1\u5000\1\u5100"+
    "\1\u5200\3\u1100\1\u5300\1\u5400\1\u5500\11\u2000\1\u5600\4\u1100"+
    "\1\u5700\17\u2000\2\u1100\1\u5800\41\u2000\2\u1100\1\u5900\1\u5a00"+
    "\2\u2000\1\u5b00\1\u5c00\27\u1100\1\u5d00\2\u1100\1\u5e00\1\u5f00"+
    "\1\u6000\1\u6100\41\u2000\1\u6200\1\u1100\1\u6300\1\u6400\11\u2000"+
    "\1\u6500\22\u2000\1\u6600\1\u2000\1\u6700\1\u6800\1\u2000\1\u6900"+
    "\1\u6a00\1\u6b00\1\u6c00\2\u2000\1\u6d00\4\u2000\1\u6e00\1\u6f00"+
    "\1\u7000\1\u7100\1\u2000\1\u7200\2\u2000\1\u7300\1\u7400\1\u7500"+
    "\2\u2000\1\u7600\1\u2000\1\u7700\14\u2000\1\u7800\4\u2000\246\u1100"+
    "\1\u7900\20\u1100\1\u7a00\1\u7b00\25\u1100\1\u7c00\34\u1100\1\u7d00"+
    "\14\u2000\2\u1100\1\u7e00\5\u2000\23\u5f00\1\u7f00\17\u5f00\1\u8000"+
    "\u0adc\u2000\1\u8100\1\u8200\u02fe\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\2\1\1\2\16\0\4\3\1\1"+
    "\1\4\1\5\1\3\1\0\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\11\22\1\23\1\24\1\25\1\26\1\27\1\30\1\3"+
    "\1\31\1\32\1\33\1\34\1\35\1\36\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\51\1\62\1\3\1\63\1\3\1\64\1\65"+
    "\1\66\1\67\1\70\1\71\1\72\1\73\1\37\1\40"+
    "\1\41\1\42\1\43\1\44\1\45\1\46\1\47\1\50"+
    "\1\51\1\52\1\53\1\54\1\55\1\56\1\57\1\60"+
    "\1\61\1\51\1\74\1\75\1\76\1\77\6\0\1\100"+
    "\32\0\1\1\1\3\4\0\4\3\1\51\2\3\1\0"+
    "\7\3\1\51\4\3\1\51\5\3\27\51\1\3\37\51"+
    "\1\3\70\51\2\41\115\51\1\53\u0142\51\4\3\14\51"+
    "\16\3\5\51\7\3\1\51\1\3\1\51\21\3\160\0"+
    "\5\51\1\3\2\51\2\3\4\51\1\3\1\51\6\3"+
    "\1\51\1\3\3\51\1\3\1\51\1\3\24\51\1\3"+
    "\123\51\1\3\213\51\1\3\5\0\2\3\246\51\1\3"+
    "\46\51\2\3\1\51\6\3\51\51\6\3\1\0\1\3"+
    "\55\0\1\3\1\0\1\3\2\0\1\3\2\0\1\3"+
    "\1\0\10\3\33\51\4\3\4\51\15\3\6\0\5\3"+
    "\1\0\4\3\13\0\1\3\1\0\3\3\53\51\25\0"+
    "\12\101\4\3\2\51\1\0\143\51\1\3\1\51\10\0"+
    "\1\3\6\0\2\51\2\0\1\3\4\0\2\51\12\101"+
    "\3\51\2\3\1\51\17\3\1\0\1\51\1\0\36\51"+
    "\33\0\2\3\131\51\13\0\1\51\16\3\12\101\41\51"+
    "\11\0\2\51\4\3\1\51\2\3\3\0\26\51\4\0"+
    "\1\51\11\0\1\51\3\0\1\51\5\0\22\3\31\51"+
    "\3\0\4\3\13\51\5\3\30\0\1\3\6\0\1\3"+
    "\2\0\6\3\10\0\25\51\1\0\10\51\106\0\66\51"+
    "\3\0\1\51\22\0\1\51\7\0\12\51\2\0\2\3"+
    "\12\101\1\3\20\51\3\0\1\3\10\51\2\3\2\51"+
    "\2\3\26\51\1\3\7\51\1\3\1\51\3\3\4\51"+
    "\2\3\1\0\1\51\7\0\2\3\2\0\2\3\3\0"+
    "\1\51\10\3\1\0\4\3\2\51\1\3\3\51\2\0"+
    "\2\3\12\101\2\51\2\0\7\3\1\0\1\51\1\3"+
    "\1\0\2\3\3\0\1\3\6\51\4\3\2\51\2\3"+
    "\26\51\1\3\7\51\1\3\2\51\1\3\2\51\1\3"+
    "\2\51\2\3\1\0\1\3\5\0\4\3\2\0\2\3"+
    "\3\0\3\3\1\0\7\3\4\51\1\3\1\51\7\3"+
    "\12\101\2\0\3\51\1\0\13\3\3\0\1\3\11\51"+
    "\1\3\3\51\1\3\26\51\1\3\7\51\1\3\2\51"+
    "\1\3\5\51\2\3\1\0\1\51\10\0\1\3\3\0"+
    "\1\3\3\0\2\3\1\51\17\3\2\51\2\0\2\3"+
    "\12\101\1\3\1\0\7\3\1\51\6\0\1\3\3\0"+
    "\1\3\10\51\2\3\2\51\2\3\26\51\1\3\7\51"+
    "\1\3\2\51\1\3\5\51\2\3\1\0\1\51\7\0"+
    "\2\3\2\0\2\3\3\0\7\3\3\0\4\3\2\51"+
    "\1\3\3\51\2\0\2\3\12\101\1\3\1\51\20\3"+
    "\1\0\1\51\1\3\6\51\3\3\3\51\1\3\4\51"+
    "\3\3\2\51\1\3\1\51\1\3\2\51\3\3\2\51"+
    "\3\3\3\51\3\3\14\51\4\3\5\0\3\3\3\0"+
    "\1\3\4\0\2\3\1\51\6\3\1\0\16\3\12\101"+
    "\11\3\1\0\6\3\5\0\10\51\1\3\3\51\1\3"+
    "\27\51\1\3\20\51\2\3\1\0\1\51\7\0\1\3"+
    "\3\0\1\3\4\0\7\3\2\0\1\3\3\51\2\3"+
    "\1\0\2\3\2\51\2\0\2\3\12\101\20\3\1\51"+
    "\3\0\1\3\10\51\1\3\3\51\1\3\27\51\1\3"+
    "\12\51\1\3\5\51\2\3\1\0\1\51\7\0\1\3"+
    "\3\0\1\3\4\0\7\3\2\0\6\3\1\0\1\51"+
    "\1\3\2\51\2\0\2\3\12\101\1\3\2\51\1\0"+
    "\14\3\5\0\10\51\1\3\3\51\1\3\51\51\2\0"+
    "\1\51\7\0\1\3\3\0\1\3\4\0\1\51\5\3"+
    "\3\51\1\0\7\3\3\51\2\0\2\3\12\101\12\3"+
    "\6\51\1\3\3\0\1\3\22\51\3\3\30\51\1\3"+
    "\11\51\1\3\1\51\2\3\7\51\3\3\1\0\4\3"+
    "\6\0\1\3\1\0\1\3\10\0\6\3\12\101\2\3"+
    "\2\0\15\3\60\51\1\0\2\51\7\0\4\3\1\0"+
    "\7\51\10\0\1\3\12\101\47\3\2\51\1\3\1\51"+
    "\1\3\5\51\1\3\30\51\1\3\1\51\1\3\12\51"+
    "\1\0\2\51\11\0\1\51\2\3\5\51\1\3\1\51"+
    "\1\3\7\0\1\3\12\101\2\3\4\51\40\3\1\51"+
    "\27\3\2\0\6\3\12\101\13\3\1\0\1\3\1\0"+
    "\1\3\1\0\4\3\2\0\10\51\1\3\44\51\4\3"+
    "\24\0\1\3\2\0\5\51\13\0\1\3\44\0\11\3"+
    "\1\0\71\3\53\51\24\0\1\51\12\101\6\3\6\51"+
    "\4\0\4\51\3\0\1\51\3\0\2\51\7\0\3\51"+
    "\4\0\15\51\14\0\1\51\1\0\12\101\4\0\2\3"+
    "\46\51\1\3\1\51\5\3\1\51\2\3\53\51\1\3"+
    "\u014d\51\1\3\4\51\2\3\7\51\1\3\1\51\1\3"+
    "\4\51\2\3\51\51\1\3\4\51\2\3\41\51\1\3"+
    "\4\51\2\3\7\51\1\3\1\51\1\3\4\51\2\3"+
    "\17\51\1\3\71\51\1\3\4\51\2\3\103\51\2\3"+
    "\3\0\40\3\20\51\20\3\126\51\2\3\6\51\3\3"+
    "\u016c\51\2\3\21\51\1\1\32\51\5\3\113\51\3\3"+
    "\3\0\10\51\7\3\15\51\1\0\4\51\4\0\11\3"+
    "\1\0\22\51\3\0\13\3\22\51\2\0\14\3\15\51"+
    "\1\3\3\51\1\3\2\0\14\3\64\51\40\0\3\3"+
    "\1\51\3\3\1\0\1\51\1\0\2\3\12\101\41\3"+
    "\5\0\12\101\6\3\131\51\7\3\5\51\2\0\42\51"+
    "\1\0\1\51\5\3\106\51\12\3\37\51\1\3\14\0"+
    "\4\3\14\0\12\3\12\101\36\51\2\3\5\51\13\3"+
    "\54\51\4\3\32\51\6\3\12\101\46\3\27\51\5\0"+
    "\4\3\65\51\12\0\1\3\35\0\2\3\1\0\12\101"+
    "\6\3\12\101\15\3\1\51\10\3\16\0\1\3\20\0"+
    "\61\3\5\0\57\51\21\0\7\51\1\0\3\3\12\101"+
    "\21\3\11\0\14\3\3\0\36\51\15\0\2\51\12\101"+
    "\54\51\16\0\14\3\44\51\24\0\10\3\12\101\3\3"+
    "\3\51\12\101\44\51\2\3\11\51\7\3\53\51\2\3"+
    "\3\51\20\3\3\0\1\3\25\0\4\51\1\0\6\51"+
    "\1\0\2\51\3\0\1\51\5\3\300\51\100\0\26\51"+
    "\2\3\6\51\2\3\46\51\2\3\6\51\2\3\10\51"+
    "\1\3\1\51\1\3\1\51\1\3\1\51\1\3\37\51"+
    "\2\3\65\51\1\3\7\51\1\3\1\51\3\3\3\51"+
    "\1\3\7\51\3\3\4\51\2\3\6\51\4\3\15\51"+
    "\5\3\3\51\1\3\7\51\3\3\13\1\5\0\30\3"+
    "\2\1\5\0\1\1\17\3\2\0\23\3\1\0\12\3"+
    "\1\1\5\0\1\3\12\0\1\3\1\51\15\3\1\51"+
    "\20\3\15\51\3\3\41\0\17\3\15\0\4\3\1\0"+
    "\3\3\14\0\21\3\1\51\4\3\1\51\2\3\12\51"+
    "\1\3\1\51\3\3\5\51\6\3\1\51\1\3\1\51"+
    "\1\3\1\51\1\3\1\43\3\51\1\3\13\51\2\3"+
    "\4\51\5\3\5\51\4\3\1\51\21\3\43\0\2\51"+
    "\4\0\u0177\3\57\51\1\0\57\51\1\0\205\51\6\3"+
    "\4\51\3\0\2\51\14\3\46\51\1\3\1\51\5\3"+
    "\1\51\2\3\70\51\7\3\1\51\17\3\1\0\27\51"+
    "\11\3\7\51\1\3\7\51\1\3\7\51\1\3\7\51"+
    "\1\3\7\51\1\3\7\51\1\3\7\51\1\3\7\51"+
    "\1\3\40\0\57\3\1\51\320\3\1\1\4\3\2\51"+
    "\1\0\31\3\17\0\1\3\5\51\2\3\3\0\2\51"+
    "\4\3\126\51\2\3\2\0\2\3\3\51\1\3\132\51"+
    "\1\3\4\51\5\3\53\51\1\3\136\51\21\3\33\51"+
    "\5\0\60\3\306\51\12\0\100\3\360\51\20\0\215\51"+
    "\103\3\56\51\2\3\15\51\3\3\20\51\12\101\2\51"+
    "\24\3\57\51\1\0\4\3\12\0\1\3\37\51\2\0"+
    "\106\51\14\0\45\3\11\51\2\3\147\51\2\3\65\51"+
    "\2\0\5\51\4\0\5\3\2\0\1\3\1\0\1\3"+
    "\5\0\30\3\5\0\13\51\1\0\3\51\1\0\4\51"+
    "\1\0\27\51\5\0\4\3\1\0\13\3\1\0\7\3"+
    "\64\51\14\3\2\0\62\51\22\0\12\3\12\101\6\3"+
    "\22\0\6\51\3\3\1\51\1\3\2\51\1\0\12\101"+
    "\34\51\10\0\2\3\27\51\15\0\14\3\35\51\3\3"+
    "\4\0\57\51\16\0\16\3\1\51\12\101\6\3\5\51"+
    "\1\0\12\51\12\101\5\51\1\3\51\51\16\0\11\3"+
    "\3\51\1\0\10\51\2\0\2\3\12\101\6\3\27\51"+
    "\3\3\1\51\3\0\62\51\1\0\1\51\3\0\2\51"+
    "\2\0\5\51\2\0\1\51\1\0\1\51\30\3\3\51"+
    "\2\3\13\51\5\0\2\3\3\51\2\0\12\3\6\51"+
    "\2\3\6\51\2\3\6\51\11\3\7\51\1\3\7\51"+
    "\1\3\53\51\1\3\14\51\2\0\6\3\163\51\10\0"+
    "\1\3\2\0\2\3\12\101\6\3\244\51\14\3\27\51"+
    "\4\3\61\51\4\3\156\51\2\3\152\51\46\3\7\51"+
    "\14\3\5\51\5\3\1\51\1\0\12\51\1\3\15\51"+
    "\1\3\5\51\1\3\1\51\1\3\2\51\1\3\2\51"+
    "\1\3\154\51\41\3\153\51\22\3\100\51\2\3\66\51"+
    "\50\3\14\51\1\0\3\3\20\0\20\3\20\0\3\3"+
    "\2\0\30\3\3\0\31\3\1\0\6\3\5\51\1\3"+
    "\207\51\2\3\1\0\4\3\1\0\13\3\12\101\7\3"+
    "\32\51\4\3\1\0\1\3\32\51\13\3\131\51\3\3"+
    "\6\51\2\3\6\51\2\3\6\51\2\3\3\51\3\3"+
    "\2\0\3\3\2\0\22\3\3\0\4\3\14\51\1\3"+
    "\32\51\1\3\23\51\1\3\2\51\1\3\17\51\2\3"+
    "\16\51\42\3\173\51\105\3\65\0\210\3\1\0\202\3"+
    "\35\51\3\3\61\51\17\3\1\0\37\3\40\51\15\3"+
    "\24\51\1\0\10\51\1\0\5\3\46\51\5\0\5\3"+
    "\36\51\2\3\44\51\4\3\10\51\1\3\5\0\52\3"+
    "\236\51\2\3\12\101\6\3\44\51\4\3\44\51\4\3"+
    "\50\51\10\3\64\51\14\3\13\0\1\3\17\0\1\3"+
    "\7\0\1\3\2\0\1\3\13\0\1\3\17\0\1\3"+
    "\7\0\1\3\2\0\103\3\67\51\11\3\26\51\12\3"+
    "\10\51\30\3\6\0\1\3\52\0\1\3\11\0\105\3"+
    "\6\51\2\3\1\51\1\3\54\51\1\3\2\51\3\3"+
    "\1\51\2\3\27\51\12\3\27\51\11\3\37\51\101\3"+
    "\23\51\1\3\2\51\12\3\26\51\12\3\32\51\106\3"+
    "\70\51\6\3\2\51\100\3\1\51\3\0\1\3\2\0"+
    "\5\3\4\0\4\51\1\3\3\51\1\3\35\51\2\3"+
    "\3\0\4\3\1\0\40\3\35\51\3\3\35\51\43\3"+
    "\10\51\1\3\34\51\2\0\31\3\66\51\12\3\26\51"+
    "\12\3\23\51\15\3\22\51\156\3\111\51\67\3\63\51"+
    "\15\3\63\51\15\3\44\51\4\0\10\3\12\101\u0146\3"+
    "\52\0\1\3\2\0\3\3\2\0\113\3\3\0\35\51"+
    "\12\3\1\51\10\3\26\51\13\0\37\3\26\0\52\3"+
    "\25\0\33\3\27\51\11\3\3\0\65\51\17\0\37\3"+
    "\12\101\6\0\11\3\4\0\55\51\13\0\2\3\1\0"+
    "\4\3\1\0\12\3\1\0\2\3\31\51\7\3\12\101"+
    "\6\3\3\0\44\51\16\0\1\3\12\101\4\3\1\51"+
    "\3\0\10\3\43\51\1\0\2\3\1\51\11\3\3\0"+
    "\60\51\16\0\4\51\4\3\4\0\1\3\2\0\12\101"+
    "\1\51\1\3\1\51\43\3\22\51\1\3\31\51\14\0"+
    "\6\3\4\0\76\3\7\51\1\3\1\51\1\3\4\51"+
    "\1\3\17\51\1\3\12\51\7\3\57\51\14\0\5\3"+
    "\12\101\6\3\4\0\1\3\10\51\2\3\2\51\2\3"+
    "\26\51\1\3\7\51\1\3\2\51\1\3\5\51\1\3"+
    "\2\0\1\51\7\0\2\3\2\0\2\3\3\0\2\3"+
    "\1\51\6\3\1\0\5\3\5\51\2\0\2\3\7\0"+
    "\3\3\5\0\213\3\65\51\22\0\4\51\5\3\12\101"+
    "\4\3\1\0\1\51\2\0\36\3\60\51\24\0\2\51"+
    "\1\3\1\51\10\3\12\101\246\3\57\51\7\0\2\3"+
    "\11\0\27\3\4\51\2\0\42\3\60\51\21\0\3\3"+
    "\1\51\13\3\12\101\46\3\53\51\15\0\1\51\7\3"+
    "\12\101\66\3\33\51\2\3\17\0\4\3\12\101\6\3"+
    "\7\0\271\3\54\51\17\0\145\3\100\51\12\101\25\3"+
    "\1\51\7\0\2\3\1\0\2\3\10\0\1\3\2\0"+
    "\1\3\36\0\1\3\2\0\2\3\11\0\14\3\12\0"+
    "\106\3\10\51\2\3\47\51\7\0\2\3\7\0\1\51"+
    "\1\3\1\51\1\0\33\3\1\51\12\0\50\51\7\0"+
    "\1\51\4\0\10\3\1\0\10\3\1\51\13\0\56\51"+
    "\20\0\3\3\1\51\22\3\20\0\71\51\7\3\11\51"+
    "\1\3\45\51\10\0\1\3\10\0\1\51\17\3\12\101"+
    "\30\3\36\51\2\3\26\0\1\3\16\0\111\3\7\51"+
    "\1\3\2\51\1\3\46\51\6\0\3\3\1\0\1\3"+
    "\2\0\1\3\7\0\1\51\1\0\10\3\12\101\6\3"+
    "\6\51\1\3\2\51\1\3\40\51\5\0\1\3\2\0"+
    "\1\3\5\0\1\51\7\3\12\101\u0136\3\23\51\4\0"+
    "\11\3\21\0\1\3\51\0\3\3\5\0\15\3\12\0"+
    "\126\3\1\0\54\3\4\0\37\3\232\51\146\3\157\0"+
    "\21\3\304\51\u014c\3\141\0\17\3\57\51\47\0\252\3"+
    "\107\51\271\3\71\51\7\3\37\51\1\3\12\101\6\3"+
    "\117\0\1\3\12\0\6\3\36\51\2\3\5\0\13\3"+
    "\60\51\7\0\11\3\4\51\14\3\12\101\11\3\25\51"+
    "\5\3\23\51\260\3\100\51\200\3\113\51\4\3\1\0"+
    "\1\51\67\0\7\3\4\0\15\51\100\3\2\51\1\3"+
    "\1\51\1\0\13\3\2\0\16\3\370\51\10\3\363\51"+
    "\u01e3\0\52\3\11\0\u01e7\3\4\0\1\3\7\0\1\3"+
    "\2\0\1\3\37\51\4\0\17\3\1\0\35\3\3\51"+
    "\2\3\1\0\16\3\4\51\10\3\u018c\51\4\3\153\51"+
    "\5\3\15\51\3\3\11\51\7\3\12\51\3\3\2\0"+
    "\1\3\4\0\134\3\56\0\2\3\27\0\u011e\3\5\0"+
    "\3\3\26\0\2\3\7\0\36\3\4\0\224\3\3\0"+
    "\273\3\125\51\1\3\107\51\1\3\2\51\2\3\1\51"+
    "\2\3\2\51\2\3\4\51\1\3\14\51\1\3\1\51"+
    "\1\3\7\51\1\3\101\51\1\3\4\51\2\3\10\51"+
    "\1\3\7\51\1\3\34\51\1\3\4\51\1\3\5\51"+
    "\1\3\1\51\3\3\7\51\1\3\u0154\51\2\3\31\51"+
    "\1\3\31\51\1\3\37\51\1\3\31\51\1\3\37\51"+
    "\1\3\31\51\1\3\37\51\1\3\31\51\1\3\37\51"+
    "\1\3\31\51\1\3\10\51\2\3\62\101\67\0\4\3"+
    "\62\0\10\3\1\0\16\3\1\0\26\3\5\0\1\3"+
    "\17\0\120\3\37\0\6\3\6\0\325\3\7\0\1\3"+
    "\21\0\2\3\7\0\1\3\2\0\1\3\5\0\5\3"+
    "\76\0\41\3\1\0\160\3\55\51\3\3\7\0\7\51"+
    "\2\3\12\101\4\3\1\51\u0141\3\37\0\21\3\54\51"+
    "\4\0\12\101\5\3\1\0\320\3\52\0\346\3\7\0"+
    "\1\3\4\0\1\3\2\0\1\3\17\0\1\3\305\51"+
    "\13\3\7\0\51\3\104\51\7\0\1\51\4\3\12\101"+
    "\u0156\3\1\0\117\3\4\51\1\3\33\51\1\3\2\51"+
    "\1\3\1\51\2\3\1\51\1\3\12\51\1\3\4\51"+
    "\1\3\1\51\1\3\1\51\6\3\1\51\4\3\1\51"+
    "\1\3\1\51\1\3\1\51\1\3\3\51\1\3\2\51"+
    "\1\3\1\51\2\3\1\51\1\3\1\51\1\3\1\51"+
    "\1\3\1\51\1\3\1\51\1\3\2\51\1\3\1\51"+
    "\2\3\4\51\1\3\7\51\1\3\4\51\1\3\4\51"+
    "\1\3\1\51\1\3\12\51\1\3\21\51\5\3\3\51"+
    "\1\3\5\51\1\3\21\51\u0134\3\12\0\6\3\327\51"+
    "\11\0\40\3\65\51\5\0\6\3\336\51\2\3\u0182\51"+
    "\16\3\u0131\51\37\3\36\51\342\3\113\0\5\3\u0160\0"+
    "\121\3\1\0\36\3\140\0\200\3\360\0\20\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[33536];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\2\0\1\1\1\2\1\3\1\1\1\4\1\5\1\1"+
    "\1\6\1\7\1\10\1\11\1\12\1\13\1\14\1\15"+
    "\2\16\1\17\1\20\1\21\1\22\1\23\1\24\25\25"+
    "\1\26\1\27\1\1\1\30\1\31\1\32\1\33\1\1"+
    "\1\34\1\35\1\0\1\36\1\0\1\37\1\40\1\16"+
    "\1\41\2\0\1\42\1\43\1\44\1\45\1\46\1\47"+
    "\1\50\2\25\1\51\1\25\1\52\14\25\1\53\1\54"+
    "\7\25\1\55\1\56\11\25\1\0\1\57\1\60\1\61"+
    "\1\62\1\63\1\41\1\0\2\16\1\64\1\65\1\66"+
    "\5\25\1\67\16\25\1\70\15\25\1\0\1\41\1\25"+
    "\1\71\1\72\1\73\1\25\1\74\2\25\1\75\1\76"+
    "\4\25\1\77\1\100\1\101\2\25\1\102\7\25\1\103"+
    "\1\104\2\25\1\105\5\25\1\106\1\25\1\107\1\25"+
    "\1\110\1\111\2\25\1\112\1\113\1\25\1\114\1\25"+
    "\1\115\1\116\1\117\2\25\1\120\1\121\1\122\2\25"+
    "\1\123\1\124\1\125\1\126\3\25\1\127\1\130\12\25"+
    "\1\131";

  private static int [] zzUnpackAction() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\102\0\204\0\306\0\u0108\0\u014a\0\204\0\204"+
    "\0\u018c\0\204\0\204\0\204\0\204\0\204\0\u01ce\0\u0210"+
    "\0\u0252\0\u0294\0\u02d6\0\204\0\204\0\u0318\0\u035a\0\u039c"+
    "\0\u03de\0\u0420\0\u0462\0\u04a4\0\u04e6\0\u0528\0\u056a\0\u05ac"+
    "\0\u05ee\0\u0630\0\u0672\0\u06b4\0\u06f6\0\u0738\0\u077a\0\u07bc"+
    "\0\u07fe\0\u0840\0\u0882\0\u08c4\0\u0906\0\u0948\0\204\0\204"+
    "\0\u098a\0\u09cc\0\u0a0e\0\u0a50\0\204\0\u0a92\0\204\0\204"+
    "\0\u014a\0\u0ad4\0\u018c\0\u0b16\0\u0b58\0\u0b9a\0\u0bdc\0\u0c1e"+
    "\0\u0c60\0\204\0\204\0\204\0\204\0\204\0\204\0\u03de"+
    "\0\u0ca2\0\u0ce4\0\u0d26\0\u0d68\0\u06b4\0\u0daa\0\u0dec\0\u0e2e"+
    "\0\u0e70\0\u0eb2\0\u0ef4\0\u0f36\0\u0f78\0\u0fba\0\u0ffc\0\u103e"+
    "\0\u1080\0\u10c2\0\u06b4\0\u1104\0\u1146\0\u1188\0\u11ca\0\u120c"+
    "\0\u124e\0\u1290\0\u06b4\0\u12d2\0\u1314\0\u1356\0\u1398\0\u13da"+
    "\0\u141c\0\u145e\0\u14a0\0\u14e2\0\u1524\0\u098a\0\u1566\0\204"+
    "\0\204\0\204\0\204\0\u15a8\0\u15ea\0\u15ea\0\u0c60\0\u06b4"+
    "\0\u06b4\0\u06b4\0\u162c\0\u166e\0\u16b0\0\u16f2\0\u1734\0\u06b4"+
    "\0\u1776\0\u17b8\0\u17fa\0\u183c\0\u187e\0\u18c0\0\u1902\0\u1944"+
    "\0\u1986\0\u19c8\0\u1a0a\0\u1a4c\0\u1a8e\0\u1ad0\0\u06b4\0\u1b12"+
    "\0\u1b54\0\u1b96\0\u1bd8\0\u1c1a\0\u1c5c\0\u1c9e\0\u1ce0\0\u1d22"+
    "\0\u1d64\0\u1da6\0\u1de8\0\u1e2a\0\u15a8\0\204\0\u1e6c\0\u06b4"+
    "\0\u06b4\0\u06b4\0\u1eae\0\u06b4\0\u1ef0\0\u1f32\0\u06b4\0\u06b4"+
    "\0\u1f74\0\u1fb6\0\u1ff8\0\u203a\0\u06b4\0\u06b4\0\u06b4\0\u207c"+
    "\0\u20be\0\u06b4\0\u2100\0\u2142\0\u2184\0\u21c6\0\u2208\0\u224a"+
    "\0\u228c\0\u06b4\0\u06b4\0\u22ce\0\u2310\0\u06b4\0\u2352\0\u2394"+
    "\0\u23d6\0\u2418\0\u245a\0\u06b4\0\u249c\0\u06b4\0\u24de\0\u06b4"+
    "\0\u06b4\0\u2520\0\u2562\0\u06b4\0\u06b4\0\u25a4\0\u06b4\0\u25e6"+
    "\0\u06b4\0\u06b4\0\u06b4\0\u2628\0\u266a\0\u06b4\0\u06b4\0\u06b4"+
    "\0\u26ac\0\u26ee\0\u06b4\0\u06b4\0\u06b4\0\u06b4\0\u2730\0\u2772"+
    "\0\u27b4\0\u06b4\0\u06b4\0\u27f6\0\u2838\0\u287a\0\u28bc\0\u28fe"+
    "\0\u2940\0\u2982\0\u29c4\0\u2a06\0\u2a48\0\u06b4";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\3\2\4\1\3\1\5\1\6\1\7\1\10\1\11"+
    "\1\12\1\13\1\14\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\1\31"+
    "\1\32\1\33\1\34\1\35\1\36\1\37\1\40\1\41"+
    "\1\42\1\43\1\44\1\45\1\46\1\47\1\50\2\44"+
    "\1\51\1\52\1\53\1\54\1\44\1\55\1\56\1\44"+
    "\1\57\1\60\1\44\1\61\1\32\1\33\1\34\1\35"+
    "\1\36\1\37\1\62\1\63\1\64\1\65\1\4\2\3"+
    "\2\4\20\3\1\66\5\3\31\44\2\3\1\44\1\3"+
    "\6\44\2\3\1\67\1\3\1\4\1\3\103\0\2\4"+
    "\75\0\1\4\27\0\1\70\53\0\5\71\1\72\74\71"+
    "\10\73\1\74\71\73\16\0\1\75\104\0\2\76\72\0"+
    "\1\77\105\0\1\76\1\0\2\23\12\0\1\100\22\0"+
    "\1\101\11\0\1\100\26\0\1\76\1\0\2\23\12\0"+
    "\1\100\34\0\1\100\34\0\1\102\1\103\1\104\100\0"+
    "\1\105\101\0\1\106\1\107\52\0\1\110\20\0\2\110"+
    "\6\0\31\110\2\0\1\110\1\0\6\110\4\0\2\110"+
    "\21\0\2\44\6\0\13\44\1\111\1\44\1\112\4\44"+
    "\1\113\6\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\4\44\1\114\23\44\1\115\2\0"+
    "\1\44\1\0\4\44\1\114\1\44\5\0\1\44\21\0"+
    "\2\44\6\0\1\116\30\44\2\0\1\44\1\0\1\116"+
    "\5\44\5\0\1\44\21\0\2\44\6\0\4\44\1\117"+
    "\3\44\1\120\20\44\2\0\1\44\1\0\4\44\1\117"+
    "\1\44\5\0\1\44\21\0\2\44\6\0\13\44\1\121"+
    "\1\44\1\122\4\44\1\123\4\44\1\124\1\44\2\0"+
    "\1\44\1\0\6\44\5\0\1\44\21\0\2\44\6\0"+
    "\1\125\20\44\1\126\2\44\1\127\4\44\2\0\1\44"+
    "\1\0\1\125\5\44\5\0\1\44\21\0\2\44\6\0"+
    "\21\44\1\130\7\44\2\0\1\44\1\0\6\44\5\0"+
    "\1\44\21\0\2\44\6\0\1\131\30\44\2\0\1\44"+
    "\1\0\1\131\5\44\5\0\1\44\21\0\2\44\6\0"+
    "\15\44\1\132\4\44\1\133\6\44\2\0\1\44\1\0"+
    "\6\44\5\0\1\44\21\0\2\44\6\0\16\44\1\134"+
    "\12\44\2\0\1\44\1\0\6\44\5\0\1\44\21\0"+
    "\2\44\6\0\31\44\2\0\1\44\1\0\6\44\5\0"+
    "\1\44\21\0\2\44\6\0\4\44\1\135\3\44\1\136"+
    "\20\44\2\0\1\44\1\0\4\44\1\135\1\44\5\0"+
    "\1\44\21\0\2\44\6\0\1\137\30\44\2\0\1\44"+
    "\1\0\1\137\5\44\5\0\1\44\21\0\2\44\6\0"+
    "\16\44\1\140\5\44\1\141\4\44\2\0\1\44\1\0"+
    "\6\44\5\0\1\44\21\0\2\44\6\0\5\44\1\142"+
    "\7\44\1\143\3\44\1\144\2\44\1\145\4\44\2\0"+
    "\1\44\1\0\5\44\1\142\5\0\1\44\21\0\2\44"+
    "\6\0\4\44\1\146\3\44\1\147\20\44\2\0\1\44"+
    "\1\0\4\44\1\146\1\44\5\0\1\44\21\0\2\44"+
    "\6\0\4\44\1\150\24\44\2\0\1\44\1\0\4\44"+
    "\1\150\1\44\5\0\1\44\21\0\2\44\6\0\7\44"+
    "\1\151\11\44\1\152\7\44\2\0\1\44\1\0\6\44"+
    "\5\0\1\44\21\0\2\44\6\0\15\44\1\153\4\44"+
    "\1\154\6\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\7\44\1\155\21\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\5\0\1\71\2\0\1\73"+
    "\10\0\2\44\6\0\31\44\2\0\1\44\1\0\6\44"+
    "\5\0\1\44\65\156\1\157\14\156\74\0\1\160\102\0"+
    "\1\161\102\0\1\162\52\0\1\163\37\0\1\71\104\0"+
    "\1\73\71\0\2\75\1\0\77\75\21\0\2\76\12\0"+
    "\1\100\34\0\1\100\7\0\13\77\1\164\66\77\14\0"+
    "\1\165\1\0\1\165\2\0\2\166\100\0\2\167\43\0"+
    "\6\167\27\0\2\44\6\0\13\44\1\170\15\44\2\0"+
    "\1\44\1\0\6\44\5\0\1\44\21\0\2\44\6\0"+
    "\3\44\1\171\25\44\2\0\1\44\1\0\3\44\1\171"+
    "\2\44\5\0\1\44\21\0\2\44\6\0\2\44\1\172"+
    "\26\44\2\0\1\44\1\0\2\44\1\172\3\44\5\0"+
    "\1\44\21\0\2\44\6\0\23\44\1\173\5\44\2\0"+
    "\1\44\1\0\6\44\5\0\1\44\21\0\2\44\6\0"+
    "\22\44\1\174\6\44\2\0\1\44\1\0\6\44\5\0"+
    "\1\44\21\0\2\44\6\0\22\44\1\175\6\44\2\0"+
    "\1\44\1\0\6\44\5\0\1\44\21\0\2\44\6\0"+
    "\22\44\1\176\6\44\2\0\1\44\1\0\6\44\5\0"+
    "\1\44\21\0\2\44\6\0\22\44\1\177\6\44\2\0"+
    "\1\44\1\0\6\44\5\0\1\44\21\0\2\44\6\0"+
    "\3\44\1\200\25\44\2\0\1\44\1\0\3\44\1\200"+
    "\2\44\5\0\1\44\21\0\2\44\6\0\2\44\1\201"+
    "\26\44\2\0\1\44\1\0\2\44\1\201\3\44\5\0"+
    "\1\44\21\0\2\44\6\0\10\44\1\202\20\44\2\0"+
    "\1\44\1\0\6\44\5\0\1\44\21\0\2\44\6\0"+
    "\13\44\1\203\15\44\2\0\1\44\1\0\6\44\5\0"+
    "\1\44\21\0\2\44\6\0\16\44\1\204\12\44\2\0"+
    "\1\44\1\0\6\44\5\0\1\44\21\0\2\44\6\0"+
    "\13\44\1\205\15\44\2\0\1\44\1\0\6\44\5\0"+
    "\1\44\21\0\2\44\6\0\16\44\1\206\12\44\2\0"+
    "\1\44\1\0\6\44\5\0\1\44\21\0\2\44\6\0"+
    "\25\44\1\207\3\44\2\0\1\44\1\0\6\44\5\0"+
    "\1\44\21\0\2\44\6\0\15\44\1\210\5\44\1\211"+
    "\5\44\2\0\1\44\1\0\6\44\5\0\1\44\21\0"+
    "\2\44\6\0\10\44\1\212\20\44\2\0\1\44\1\0"+
    "\6\44\5\0\1\44\21\0\2\44\6\0\5\44\1\213"+
    "\23\44\2\0\1\44\1\0\5\44\1\213\5\0\1\44"+
    "\21\0\2\44\6\0\12\44\1\214\1\44\1\215\14\44"+
    "\2\0\1\44\1\0\6\44\5\0\1\44\21\0\2\44"+
    "\6\0\23\44\1\216\5\44\2\0\1\44\1\0\6\44"+
    "\5\0\1\44\21\0\2\44\6\0\23\44\1\217\5\44"+
    "\2\0\1\44\1\0\6\44\5\0\1\44\21\0\2\44"+
    "\6\0\13\44\1\220\1\221\14\44\2\0\1\44\1\0"+
    "\6\44\5\0\1\44\21\0\2\44\6\0\5\44\1\222"+
    "\23\44\2\0\1\44\1\0\5\44\1\222\5\0\1\44"+
    "\21\0\2\44\6\0\3\44\1\223\25\44\2\0\1\44"+
    "\1\0\3\44\1\223\2\44\5\0\1\44\21\0\2\44"+
    "\6\0\23\44\1\224\5\44\2\0\1\44\1\0\6\44"+
    "\5\0\1\44\21\0\2\44\6\0\6\44\1\225\22\44"+
    "\2\0\1\44\1\0\6\44\5\0\1\44\21\0\2\44"+
    "\6\0\6\44\1\226\22\44\2\0\1\44\1\0\6\44"+
    "\5\0\1\44\21\0\2\44\6\0\13\44\1\227\15\44"+
    "\2\0\1\44\1\0\6\44\5\0\1\44\21\0\2\44"+
    "\6\0\4\44\1\230\24\44\2\0\1\44\1\0\4\44"+
    "\1\230\1\44\5\0\1\44\21\0\2\44\6\0\24\44"+
    "\1\231\4\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\10\44\1\232\20\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\10\44"+
    "\1\233\20\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\4\44\1\234\24\44\2\0\1\44"+
    "\1\0\4\44\1\234\1\44\5\0\1\44\65\0\1\156"+
    "\14\0\13\77\1\235\4\77\1\236\61\77\21\0\2\166"+
    "\100\0\2\44\6\0\26\44\1\237\2\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\4\44"+
    "\1\240\16\44\1\241\5\44\2\0\1\44\1\0\4\44"+
    "\1\240\1\44\5\0\1\44\21\0\2\44\6\0\2\44"+
    "\1\242\26\44\2\0\1\44\1\0\2\44\1\242\3\44"+
    "\5\0\1\44\21\0\2\44\6\0\23\44\1\243\5\44"+
    "\2\0\1\44\1\0\6\44\5\0\1\44\21\0\2\44"+
    "\6\0\4\44\1\244\24\44\2\0\1\44\1\0\4\44"+
    "\1\244\1\44\5\0\1\44\21\0\2\44\6\0\1\245"+
    "\30\44\2\0\1\44\1\0\1\245\5\44\5\0\1\44"+
    "\21\0\2\44\6\0\22\44\1\246\6\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\22\44"+
    "\1\231\6\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\14\44\1\247\14\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\13\44"+
    "\1\250\15\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\24\44\1\251\4\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\10\44"+
    "\1\252\20\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\4\44\1\253\24\44\2\0\1\44"+
    "\1\0\4\44\1\253\1\44\5\0\1\44\21\0\2\44"+
    "\6\0\4\44\1\254\24\44\2\0\1\44\1\0\4\44"+
    "\1\254\1\44\5\0\1\44\21\0\2\44\6\0\15\44"+
    "\1\255\13\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\23\44\1\256\5\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\4\44"+
    "\1\257\24\44\2\0\1\44\1\0\4\44\1\257\1\44"+
    "\5\0\1\44\21\0\2\44\6\0\10\44\1\260\20\44"+
    "\2\0\1\44\1\0\6\44\5\0\1\44\21\0\2\44"+
    "\6\0\2\44\1\261\26\44\2\0\1\44\1\0\2\44"+
    "\1\261\3\44\5\0\1\44\21\0\2\44\6\0\13\44"+
    "\1\262\15\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\1\44\1\263\27\44\2\0\1\44"+
    "\1\0\1\44\1\263\4\44\5\0\1\44\21\0\2\44"+
    "\6\0\22\44\1\264\6\44\2\0\1\44\1\0\6\44"+
    "\5\0\1\44\21\0\2\44\6\0\4\44\1\265\24\44"+
    "\2\0\1\44\1\0\4\44\1\265\1\44\5\0\1\44"+
    "\21\0\2\44\6\0\4\44\1\266\24\44\2\0\1\44"+
    "\1\0\4\44\1\266\1\44\5\0\1\44\21\0\2\44"+
    "\6\0\4\44\1\267\24\44\2\0\1\44\1\0\4\44"+
    "\1\267\1\44\5\0\1\44\21\0\2\44\6\0\7\44"+
    "\1\270\21\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\4\44\1\271\24\44\2\0\1\44"+
    "\1\0\4\44\1\271\1\44\5\0\1\44\21\0\2\44"+
    "\6\0\15\44\1\272\13\44\2\0\1\44\1\0\6\44"+
    "\5\0\1\44\21\0\2\44\6\0\4\44\1\273\24\44"+
    "\2\0\1\44\1\0\4\44\1\273\1\44\5\0\1\44"+
    "\21\0\2\44\6\0\16\44\1\274\12\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\15\44"+
    "\1\275\13\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\15\44\1\276\3\44\1\277\7\44"+
    "\2\0\1\44\1\0\6\44\5\0\1\44\21\0\2\44"+
    "\6\0\4\44\1\300\24\44\2\0\1\44\1\0\4\44"+
    "\1\300\1\44\5\0\1\44\21\0\2\44\6\0\10\44"+
    "\1\301\20\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\17\44\1\302\11\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\23\44"+
    "\1\303\5\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\17\44\1\304\11\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\15\44"+
    "\1\305\13\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\21\44\1\306\7\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\21\44"+
    "\1\307\7\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\23\44\1\310\5\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\7\44"+
    "\1\311\21\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\4\44\1\312\24\44\2\0\1\44"+
    "\1\0\4\44\1\312\1\44\5\0\1\44\21\0\2\44"+
    "\6\0\4\44\1\313\24\44\2\0\1\44\1\0\4\44"+
    "\1\313\1\44\5\0\1\44\21\0\2\44\6\0\21\44"+
    "\1\314\7\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\21\44\1\315\7\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\27\44"+
    "\1\316\1\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\23\44\1\317\5\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\2\44"+
    "\1\320\26\44\2\0\1\44\1\0\2\44\1\320\3\44"+
    "\5\0\1\44\21\0\2\44\6\0\15\44\1\321\13\44"+
    "\2\0\1\44\1\0\6\44\5\0\1\44\21\0\2\44"+
    "\6\0\6\44\1\322\22\44\2\0\1\44\1\0\6\44"+
    "\5\0\1\44\21\0\2\44\6\0\4\44\1\323\24\44"+
    "\2\0\1\44\1\0\4\44\1\323\1\44\5\0\1\44"+
    "\21\0\2\44\6\0\4\44\1\324\24\44\2\0\1\44"+
    "\1\0\4\44\1\324\1\44\5\0\1\44\21\0\2\44"+
    "\6\0\15\44\1\325\13\44\2\0\1\44\1\0\6\44"+
    "\5\0\1\44\21\0\2\44\6\0\4\44\1\326\24\44"+
    "\2\0\1\44\1\0\4\44\1\326\1\44\5\0\1\44"+
    "\21\0\2\44\6\0\22\44\1\327\6\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\6\44"+
    "\1\330\22\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\25\44\1\331\3\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\21\44"+
    "\1\332\7\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\23\44\1\333\5\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\17\44"+
    "\1\334\11\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\23\44\1\335\5\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\15\44"+
    "\1\336\13\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\2\44\1\337\26\44\2\0\1\44"+
    "\1\0\2\44\1\337\3\44\5\0\1\44\21\0\2\44"+
    "\6\0\1\340\30\44\2\0\1\44\1\0\1\340\5\44"+
    "\5\0\1\44\21\0\2\44\6\0\4\44\1\341\24\44"+
    "\2\0\1\44\1\0\4\44\1\341\1\44\5\0\1\44"+
    "\21\0\2\44\6\0\23\44\1\342\5\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\13\44"+
    "\1\343\15\44\2\0\1\44\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\3\44\1\344\25\44\2\0\1\44"+
    "\1\0\3\44\1\344\2\44\5\0\1\44\21\0\2\44"+
    "\6\0\31\44\2\0\1\345\1\0\6\44\5\0\1\44"+
    "\21\0\2\44\6\0\17\44\1\346\11\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\1\347"+
    "\30\44\2\0\1\44\1\0\1\347\5\44\5\0\1\44"+
    "\21\0\2\44\6\0\21\44\1\350\7\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\1\351"+
    "\30\44\2\0\1\44\1\0\1\351\5\44\5\0\1\44"+
    "\21\0\2\44\6\0\14\44\1\352\14\44\2\0\1\44"+
    "\1\0\6\44\5\0\1\44\21\0\2\44\6\0\4\44"+
    "\1\353\24\44\2\0\1\44\1\0\4\44\1\353\1\44"+
    "\5\0\1\44\21\0\2\44\6\0\23\44\1\354\5\44"+
    "\2\0\1\44\1\0\6\44\5\0\1\44\21\0\2\44"+
    "\6\0\4\44\1\355\24\44\2\0\1\44\1\0\4\44"+
    "\1\355\1\44\5\0\1\44\21\0\2\44\6\0\21\44"+
    "\1\356\7\44\2\0\1\44\1\0\6\44\5\0\1\44";

  private static int [] zzUnpacktrans() {
    int [] result = new int[10890];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\2\0\1\11\3\1\2\11\1\1\5\11\5\1\2\11"+
    "\31\1\2\11\4\1\1\11\1\1\2\11\1\0\1\1"+
    "\1\0\4\1\2\0\6\11\46\1\1\0\1\1\4\11"+
    "\1\1\1\0\47\1\1\0\1\11\120\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[238];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  /**
   * `true`  - represents beginning of the single brace `{` statement
   * `false` - represents beginning of the double brace `{{` statement
   */
  private Deque<Boolean> braces = new ArrayDeque<Boolean>();
  public _FlexibleSearchLexer() {
      this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _FlexibleSearchLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 90: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 91: break;
          case 3:
            { return EXCLAMATION_MARK;
            }
          // fall through
          case 92: break;
          case 4:
            { return MOD;
            }
          // fall through
          case 93: break;
          case 5:
            { return AMP;
            }
          // fall through
          case 94: break;
          case 6:
            { return LPAREN;
            }
          // fall through
          case 95: break;
          case 7:
            { return RPAREN;
            }
          // fall through
          case 96: break;
          case 8:
            { return STAR;
            }
          // fall through
          case 97: break;
          case 9:
            { return PLUS;
            }
          // fall through
          case 98: break;
          case 10:
            { return COMMA;
            }
          // fall through
          case 99: break;
          case 11:
            { return MINUS;
            }
          // fall through
          case 100: break;
          case 12:
            { return DOT;
            }
          // fall through
          case 101: break;
          case 13:
            { return DIV;
            }
          // fall through
          case 102: break;
          case 14:
            { return NUMERIC_LITERAL;
            }
          // fall through
          case 103: break;
          case 15:
            { return COLON;
            }
          // fall through
          case 104: break;
          case 16:
            { return SEMICOLON;
            }
          // fall through
          case 105: break;
          case 17:
            { return LT;
            }
          // fall through
          case 106: break;
          case 18:
            { return EQ;
            }
          // fall through
          case 107: break;
          case 19:
            { return GT;
            }
          // fall through
          case 108: break;
          case 20:
            { return QUESTION_MARK;
            }
          // fall through
          case 109: break;
          case 21:
            { return IDENTIFIER;
            }
          // fall through
          case 110: break;
          case 22:
            { return LBRACKET;
            }
          // fall through
          case 111: break;
          case 23:
            { yybegin(LOCALIZED_STATE); return RBRACKET;
            }
          // fall through
          case 112: break;
          case 24:
            { braces.push(true); return LBRACE;
            }
          // fall through
          case 113: break;
          case 25:
            { return BAR;
            }
          // fall through
          case 114: break;
          case 26:
            { if (!braces.isEmpty() && braces.getFirst()) braces.pop();

                                        return RBRACE;
            }
          // fall through
          case 115: break;
          case 27:
            { return TILDE;
            }
          // fall through
          case 116: break;
          case 28:
            { yybegin(YYINITIAL); return RBRACE;
            }
          // fall through
          case 117: break;
          case 29:
            { return NOT_EQ;
            }
          // fall through
          case 118: break;
          case 30:
            { return DOUBLE_QUOTE_STRING_LITERAL;
            }
          // fall through
          case 119: break;
          case 31:
            { return SINGLE_QUOTE_STRING_LITERAL;
            }
          // fall through
          case 120: break;
          case 32:
            { return LINE_COMMENT;
            }
          // fall through
          case 121: break;
          case 33:
            { return COMMENT;
            }
          // fall through
          case 122: break;
          case 34:
            { return SHL;
            }
          // fall through
          case 123: break;
          case 35:
            { return LTE;
            }
          // fall through
          case 124: break;
          case 36:
            { return UNEQ;
            }
          // fall through
          case 125: break;
          case 37:
            { return EQEQ;
            }
          // fall through
          case 126: break;
          case 38:
            { return GTE;
            }
          // fall through
          case 127: break;
          case 39:
            { return SHR;
            }
          // fall through
          case 128: break;
          case 40:
            { return NAMED_PARAMETER;
            }
          // fall through
          case 129: break;
          case 41:
            { return AS;
            }
          // fall through
          case 130: break;
          case 42:
            { return BY;
            }
          // fall through
          case 131: break;
          case 43:
            { return IN;
            }
          // fall through
          case 132: break;
          case 44:
            { return IS;
            }
          // fall through
          case 133: break;
          case 45:
            { return ON;
            }
          // fall through
          case 134: break;
          case 46:
            { return OR;
            }
          // fall through
          case 135: break;
          case 47:
            { return BACKTICK_LITERAL;
            }
          // fall through
          case 136: break;
          case 48:
            { braces.push(false);
                                        return LDBRACE;
            }
          // fall through
          case 137: break;
          case 49:
            { return CONCAT;
            }
          // fall through
          case 138: break;
          case 50:
            { if (!braces.isEmpty() && !braces.getFirst()) {
                                            braces.pop();
                                            return RDBRACE;
                                        } else {
                                            if (!braces.isEmpty()) braces.pop();
                                            yypushback(1); return RBRACE;
                                        }
            }
          // fall through
          case 139: break;
          case 51:
            { yybegin(YYINITIAL); return OUTER_JOIN;
            }
          // fall through
          case 140: break;
          case 52:
            { return ALL;
            }
          // fall through
          case 141: break;
          case 53:
            { return AND;
            }
          // fall through
          case 142: break;
          case 54:
            { return ASC;
            }
          // fall through
          case 143: break;
          case 55:
            { return END;
            }
          // fall through
          case 144: break;
          case 56:
            { return NOT;
            }
          // fall through
          case 145: break;
          case 57:
            { return CASE;
            }
          // fall through
          case 146: break;
          case 58:
            { return CAST;
            }
          // fall through
          case 147: break;
          case 59:
            { return DESC;
            }
          // fall through
          case 148: break;
          case 60:
            { return ELSE;
            }
          // fall through
          case 149: break;
          case 61:
            { return FROM;
            }
          // fall through
          case 150: break;
          case 62:
            { return FULL;
            }
          // fall through
          case 151: break;
          case 63:
            { return JOIN;
            }
          // fall through
          case 152: break;
          case 64:
            { return LEFT;
            }
          // fall through
          case 153: break;
          case 65:
            { return LIKE;
            }
          // fall through
          case 154: break;
          case 66:
            { return NULL;
            }
          // fall through
          case 155: break;
          case 67:
            { return THEN;
            }
          // fall through
          case 156: break;
          case 68:
            { return BOOLEAN_LITERAL;
            }
          // fall through
          case 157: break;
          case 69:
            { return WHEN;
            }
          // fall through
          case 158: break;
          case 70:
            { return GROUP;
            }
          // fall through
          case 159: break;
          case 71:
            { return INNER;
            }
          // fall through
          case 160: break;
          case 72:
            { return LIMIT;
            }
          // fall through
          case 161: break;
          case 73:
            { return MATCH;
            }
          // fall through
          case 162: break;
          case 74:
            { return ORDER;
            }
          // fall through
          case 163: break;
          case 75:
            { return OUTER;
            }
          // fall through
          case 164: break;
          case 76:
            { return RIGHT;
            }
          // fall through
          case 165: break;
          case 77:
            { return UNION;
            }
          // fall through
          case 166: break;
          case 78:
            { return USING;
            }
          // fall through
          case 167: break;
          case 79:
            { return WHERE;
            }
          // fall through
          case 168: break;
          case 80:
            { return ESCAPE;
            }
          // fall through
          case 169: break;
          case 81:
            { return EXISTS;
            }
          // fall through
          case 170: break;
          case 82:
            { return HAVING;
            }
          // fall through
          case 171: break;
          case 83:
            { return OFFSET;
            }
          // fall through
          case 172: break;
          case 84:
            { return REGEXP;
            }
          // fall through
          case 173: break;
          case 85:
            { return SELECT;
            }
          // fall through
          case 174: break;
          case 86:
            { return BETWEEN;
            }
          // fall through
          case 175: break;
          case 87:
            { return DISTINCT;
            }
          // fall through
          case 176: break;
          case 88:
            { return INTERVAL;
            }
          // fall through
          case 177: break;
          case 89:
            { return NUMBERED_PARAMETER;
            }
          // fall through
          case 178: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
