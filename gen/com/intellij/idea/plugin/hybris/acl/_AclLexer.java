/*
 * This file is part of "SAP Commerce Developers Toolset" plugin for IntelliJ IDEA.
 * Copyright (C) 2019-2025 EPAM Systems <hybrisideaplugin@epam.com> and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: acl.flex

package com.intellij.idea.plugin.hybris.acl;

import com.intellij.lexer.FlexLexer;
import com.intellij.idea.plugin.hybris.acl.psi.AclTypes;
import com.intellij.psi.TokenType;
import com.intellij.psi.tree.IElementType;

import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.idea.plugin.hybris.acl.psi.AclTypes.*;


public class _AclLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int USER_RIGHTS_START = 2;
  public static final int USER_RIGHTS_END = 4;
  public static final int USER_RIGHTS_HEADER_LINE = 6;
  public static final int USER_RIGHTS_VALUE_LINE = 8;
  public static final int USER_RIGHTS_VALUE_PASSWORD = 10;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  3,  3,  4,  4,  5, 5
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\36\u0200\1\u0300\267\u0200\10\u0400\u1020\u0200";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\1\3\1\1\1\2\22\0\1\1"+
    "\1\0\1\4\1\5\1\6\6\0\1\7\1\10\1\11"+
    "\1\12\1\0\12\13\1\0\1\14\5\0\1\15\1\16"+
    "\1\13\1\17\1\20\1\21\1\22\1\23\1\24\3\13"+
    "\1\25\1\26\1\27\1\30\1\13\1\31\1\32\1\33"+
    "\1\34\1\13\1\35\1\13\1\36\1\13\4\0\1\37"+
    "\1\0\1\15\1\16\1\13\1\17\1\20\1\21\1\22"+
    "\1\23\1\24\3\13\1\25\1\26\1\27\1\30\1\13"+
    "\1\31\1\32\1\33\1\34\1\13\1\35\1\13\1\36"+
    "\1\13\12\0\1\3\252\0\2\40\115\0\1\41\u01a8\0"+
    "\2\3\326\0\u0100\3";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[1280];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\6\0\1\1\1\2\1\3\1\4\1\1\1\5\1\6"+
    "\1\7\1\1\1\10\1\11\4\10\1\12\1\1\1\13"+
    "\1\14\1\15\1\16\1\17\1\20\1\21\1\22\1\1"+
    "\1\23\2\0\5\10\7\0\2\10\1\0\2\10\2\24"+
    "\1\0\1\21\3\0\2\10\1\0\1\10\1\25\4\0"+
    "\2\10\1\0\1\10\4\0\2\10\1\0\1\26\4\0"+
    "\2\10\2\0\1\21\2\0\1\10\2\27\3\0\1\10"+
    "\3\0\1\10\3\0\1\10\3\0\1\10\3\0\1\10"+
    "\3\0\2\30\2\0\1\31\1\32\1\0\1\33";

  private static int [] zzUnpackAction() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\42\0\104\0\146\0\210\0\252\0\314\0\356"+
    "\0\u0110\0\u0132\0\u0154\0\u0176\0\314\0\u0198\0\u01ba\0\u01dc"+
    "\0\314\0\u01fe\0\u0220\0\u0242\0\u0264\0\u0286\0\u02a8\0\314"+
    "\0\314\0\u02ca\0\314\0\u02ca\0\314\0\u02ec\0\u030e\0\u0330"+
    "\0\314\0\u0352\0\u0374\0\u0396\0\u03b8\0\u03da\0\u03fc\0\u041e"+
    "\0\u0440\0\u0462\0\u02ec\0\u0484\0\u04a6\0\u04c8\0\u04ea\0\u050c"+
    "\0\u052e\0\u0550\0\u0572\0\u0594\0\u01dc\0\314\0\u05b6\0\314"+
    "\0\u05d8\0\u05fa\0\u061c\0\u063e\0\u0660\0\u0682\0\u06a4\0\u01dc"+
    "\0\u06c6\0\u06e8\0\u070a\0\u072c\0\u074e\0\u0770\0\u0792\0\u07b4"+
    "\0\u07d6\0\u07f8\0\u081a\0\u083c\0\u085e\0\u0880\0\u08a2\0\u01dc"+
    "\0\u08c4\0\u08e6\0\u0908\0\u092a\0\u094c\0\u096e\0\u0990\0\u09b2"+
    "\0\u08e6\0\u09d4\0\u09f6\0\u0a18\0\u01dc\0\314\0\u0a3a\0\u0a5c"+
    "\0\u0a7e\0\u0aa0\0\u0ac2\0\u0ae4\0\u0b06\0\u0b28\0\u0b4a\0\u0b6c"+
    "\0\u0b8e\0\u0bb0\0\u0bd2\0\u0bf4\0\u0c16\0\u0c38\0\u0c5a\0\u0c7c"+
    "\0\u0c9e\0\u0cc0\0\u0ce2\0\u0d04\0\u0d26\0\u01dc\0\314\0\u0d48"+
    "\0\u0d6a\0\314\0\314\0\u0d8c\0\314";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\7\1\10\1\11\1\0\1\7\1\12\1\13\34\7"+
    "\1\10\1\14\1\0\1\7\1\12\6\7\1\15\26\7"+
    "\1\10\1\11\1\0\1\7\1\12\6\7\1\15\26\7"+
    "\1\10\1\16\1\0\1\7\1\12\1\17\2\7\1\20"+
    "\1\7\1\20\1\21\10\20\1\22\2\20\1\23\2\20"+
    "\1\24\1\25\3\20\3\7\1\10\1\26\1\0\1\7"+
    "\1\12\1\27\1\30\1\31\1\32\1\33\1\34\1\35"+
    "\23\34\2\7\1\36\1\10\1\37\1\36\1\40\1\12"+
    "\6\36\1\41\25\36\43\0\1\10\41\0\2\11\37\0"+
    "\2\12\1\0\37\12\32\0\1\42\6\0\1\42\1\0"+
    "\2\14\40\0\2\16\57\0\1\43\32\0\1\20\1\0"+
    "\1\20\1\0\23\20\13\0\1\20\1\0\1\20\1\0"+
    "\3\20\1\44\17\20\13\0\1\20\1\0\1\20\1\0"+
    "\1\45\22\20\13\0\1\20\1\0\1\20\1\0\1\46"+
    "\20\20\1\47\1\20\13\0\1\20\1\0\1\20\1\0"+
    "\7\20\1\50\13\20\1\51\2\0\2\26\57\0\1\52"+
    "\32\0\1\34\1\0\1\34\1\0\23\34\2\0\1\36"+
    "\1\53\1\0\1\36\1\0\7\36\1\0\25\36\1\0"+
    "\2\37\37\0\2\54\1\0\1\54\1\55\7\54\1\0"+
    "\25\54\33\0\1\56\34\0\1\57\24\0\1\20\1\0"+
    "\1\20\1\0\10\20\1\60\12\20\13\0\1\20\1\0"+
    "\1\20\1\0\15\20\1\61\5\20\1\0\1\62\11\0"+
    "\1\20\1\0\1\20\1\0\14\20\1\63\6\20\13\0"+
    "\1\20\1\0\1\20\1\0\13\20\1\64\7\20\13\0"+
    "\1\20\1\0\1\20\1\0\2\20\1\65\20\20\21\0"+
    "\1\66\50\0\1\67\13\0\2\54\1\0\1\54\1\70"+
    "\7\54\1\0\25\54\4\0\1\71\52\0\1\72\43\0"+
    "\1\73\33\0\1\20\1\0\1\20\1\0\1\20\1\74"+
    "\21\20\13\0\1\20\1\0\1\20\1\0\15\20\1\75"+
    "\5\20\1\0\1\76\32\0\1\76\6\0\1\76\11\0"+
    "\1\20\1\0\1\20\1\0\5\20\1\77\15\20\13\0"+
    "\1\20\1\0\1\20\1\0\3\20\1\100\17\20\21\0"+
    "\1\101\22\0\2\102\1\0\37\102\31\0\1\103\47\0"+
    "\1\104\13\0\1\20\1\0\1\20\1\0\3\20\1\105"+
    "\17\20\13\0\1\20\1\0\1\20\1\0\20\20\1\106"+
    "\2\20\37\0\1\107\15\0\1\20\1\0\1\20\1\0"+
    "\3\20\1\110\17\20\41\0\1\111\2\0\2\102\1\0"+
    "\1\102\1\112\35\102\33\0\1\113\42\0\1\114\16\0"+
    "\1\20\1\0\1\20\1\0\14\20\1\115\6\20\13\0"+
    "\1\20\1\0\1\20\1\0\12\20\1\116\10\20\31\0"+
    "\1\117\23\0\1\20\1\0\1\20\1\0\16\20\1\120"+
    "\4\20\36\0\1\121\5\0\2\102\1\0\1\102\1\122"+
    "\35\102\37\0\1\123\34\0\1\124\6\0\1\124\11\0"+
    "\1\20\1\0\1\20\1\0\12\20\1\125\10\20\13\0"+
    "\1\20\1\0\1\20\1\0\14\20\1\126\6\20\33\0"+
    "\1\127\42\0\1\130\6\0\1\130\2\102\1\0\1\102"+
    "\1\131\35\102\34\0\1\132\25\0\1\133\32\0\1\20"+
    "\1\0\1\20\1\0\4\20\1\134\16\20\13\0\1\20"+
    "\1\0\1\20\1\0\2\20\1\135\20\20\21\0\1\136"+
    "\42\0\1\137\53\0\1\140\6\0\1\140\31\0\1\141"+
    "\21\0\1\20\1\0\1\20\1\0\5\20\1\142\15\20"+
    "\33\0\1\143\30\0\1\144\52\0\1\145\21\0\1\20"+
    "\1\0\1\20\1\0\14\20\1\146\6\20\33\0\1\147"+
    "\41\0\1\150\34\0\1\151\13\0\1\151\12\0\1\20"+
    "\1\0\1\20\1\0\12\20\1\152\10\20\26\0\1\153"+
    "\13\0\1\153\32\0\1\154\32\0\1\155\30\0\1\20"+
    "\1\0\1\20\1\0\17\20\1\156\3\20\24\0\1\157"+
    "\43\0\1\160\13\0\1\160\24\0\1\161\27\0\1\20"+
    "\1\0\1\20\1\0\13\20\1\162\7\20\25\0\1\163"+
    "\40\0\1\164\52\0\1\165\17\0\1\20\1\0\1\20"+
    "\1\0\15\20\1\166\5\20\1\0\1\167\33\0\1\170"+
    "\31\0\1\171\50\0\1\172\6\0\1\172\32\0\1\173"+
    "\6\0\1\173\33\0\1\174\40\0\1\175\6\0\1\175";

  private static int [] zzUnpacktrans() {
    int [] result = new int[3502];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\6\0\1\11\5\1\1\11\3\1\1\11\6\1\2\11"+
    "\1\1\1\11\1\1\1\11\3\1\1\11\2\0\5\1"+
    "\7\0\2\1\1\0\3\1\1\11\1\0\1\11\3\0"+
    "\2\1\1\0\2\1\4\0\2\1\1\0\1\1\4\0"+
    "\2\1\1\0\1\1\4\0\2\1\2\0\1\1\2\0"+
    "\2\1\1\11\3\0\1\1\3\0\1\1\3\0\1\1"+
    "\3\0\1\1\3\0\1\1\3\0\1\1\1\11\2\0"+
    "\2\11\1\0\1\11";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[125];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  private boolean zzEOFDone;

  /* user code: */
  private AtomicInteger permissionHeader = new AtomicInteger(0);
  private AtomicInteger valueColumn = new AtomicInteger(0);
  private AtomicInteger targetIdentifiers = new AtomicInteger(0);
  private AtomicBoolean passwordColumnPresent = new AtomicBoolean(false);
  private AtomicBoolean headerFound = new AtomicBoolean(false);
  public _AclLexer() {
    this((java.io.Reader)null);
    }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _AclLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Contains user EOF-code, which will be executed exactly once,
   * when the end of file is reached
   */
  private void zzDoEOF() {
    if (!zzEOFDone) {
      zzEOFDone = true;
    
    return;
    }
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
            zzDoEOF();
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return TokenType.BAD_CHARACTER;
            }
          // fall through
          case 28: break;
          case 2:
            { return TokenType.WHITE_SPACE;
            }
          // fall through
          case 29: break;
          case 3:
            { yybegin(YYINITIAL); return AclTypes.CRLF;
            }
          // fall through
          case 30: break;
          case 4:
            { return AclTypes.LINE_COMMENT;
            }
          // fall through
          case 31: break;
          case 5:
            { yybegin(USER_RIGHTS_HEADER_LINE);
        permissionHeader.set(0);
        passwordColumnPresent.set(false);
        headerFound.set(false);
        return TokenType.WHITE_SPACE;
            }
          // fall through
          case 32: break;
          case 6:
            { return AclTypes.DUMMY_SEPARATOR;
            }
          // fall through
          case 33: break;
          case 7:
            { if (headerFound.get()) {
            valueColumn.set(0);
            targetIdentifiers.set(0);
            yybegin(USER_RIGHTS_VALUE_LINE);
        }
        return TokenType.WHITE_SPACE;
            }
          // fall through
          case 34: break;
          case 8:
            { return switch (permissionHeader.incrementAndGet()) {
            case 1 -> AclTypes.HEADER_READ;
            case 2 -> AclTypes.HEADER_CHANGE;
            case 3 -> AclTypes.HEADER_CREATE;
            case 4 -> AclTypes.HEADER_REMOVE;
            case 5 -> AclTypes.HEADER_CHANGE_PERM;
            // any other columns are not expected
            default -> TokenType.BAD_CHARACTER;
        };
            }
          // fall through
          case 35: break;
          case 9:
            { return AclTypes.PARAMETERS_SEPARATOR;
            }
          // fall through
          case 36: break;
          case 10:
            { valueColumn.set(0);
        targetIdentifiers.set(0);
        yybegin(USER_RIGHTS_VALUE_LINE);
        return TokenType.WHITE_SPACE;
            }
          // fall through
          case 37: break;
          case 11:
            { return AclTypes.PERMISSION_GRANTED;
            }
          // fall through
          case 38: break;
          case 12:
            { return AclTypes.COMMA;
            }
          // fall through
          case 39: break;
          case 13:
            { return AclTypes.PERMISSION_DENIED;
            }
          // fall through
          case 40: break;
          case 14:
            { return passwordColumnPresent.get() && valueColumn.get() >= 5
            || !passwordColumnPresent.get() && valueColumn.get() >= 4
            ? AclTypes.PERMISSION_INHERITED
            : AclTypes.DOT;
            }
          // fall through
          case 41: break;
          case 15:
            { if (passwordColumnPresent.get() && valueColumn.get() == 4 || valueColumn.get() == 3) {
                return switch (targetIdentifiers.getAndIncrement()) {
                    case 0 -> AclTypes.FIELD_VALUE_TARGET_TYPE;
                    case 1 -> AclTypes.FIELD_VALUE_TARGET_ATTRIBUTE;
                    default -> AclTypes.FIELD_VALUE;
                };
            }
            return valueColumn.get() == 0
                ? AclTypes.FIELD_VALUE_TYPE
                : AclTypes.FIELD_VALUE;
            }
          // fall through
          case 42: break;
          case 16:
            { valueColumn.incrementAndGet();
        if (passwordColumnPresent.get() && valueColumn.get() == 3) yybegin(USER_RIGHTS_VALUE_PASSWORD);
        return valueColumn.get() == 1
            ? AclTypes.FIELD_VALUE_TYPE_SEPARATOR
            : AclTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 43: break;
          case 17:
            { return AclTypes.PASSWORD;
            }
          // fall through
          case 44: break;
          case 18:
            { valueColumn.set(0); yybegin(USER_RIGHTS_VALUE_LINE); return TokenType.WHITE_SPACE;
            }
          // fall through
          case 45: break;
          case 19:
            { valueColumn.incrementAndGet();
        yybegin(USER_RIGHTS_VALUE_LINE);
        return AclTypes.FIELD_VALUE_SEPARATOR;
            }
          // fall through
          case 46: break;
          case 20:
            { return AclTypes.HEADER_UID;
            }
          // fall through
          case 47: break;
          case 21:
            { headerFound.set(true); return AclTypes.HEADER_TYPE;
            }
          // fall through
          case 48: break;
          case 22:
            { return AclTypes.HEADER_TARGET;
            }
          // fall through
          case 49: break;
          case 23:
            { passwordColumnPresent.set(true); return AclTypes.HEADER_PASSWORD;
            }
          // fall through
          case 50: break;
          case 24:
            { return AclTypes.HEADER_MEMBEROFGROUPS;
            }
          // fall through
          case 51: break;
          case 25:
            { yybegin(YYINITIAL); return AclTypes.END_USERRIGHTS;
            }
          // fall through
          case 52: break;
          case 26:
            { yybegin(USER_RIGHTS_END); return AclTypes.END_USERRIGHTS;
            }
          // fall through
          case 53: break;
          case 27:
            { yybegin(USER_RIGHTS_START); return AclTypes.START_USERRIGHTS;
            }
          // fall through
          case 54: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
