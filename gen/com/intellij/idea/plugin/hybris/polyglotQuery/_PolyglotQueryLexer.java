/*
 * This file is part of "SAP Commerce Developers Toolset" plugin for IntelliJ IDEA.
 * Copyright (C) 2019-2025 EPAM Systems <hybrisideaplugin@epam.com> and contributors
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.
 * See the GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program. If not, see <http://www.gnu.org/licenses/>.
 */

// Generated by JFlex 1.9.2 http://jflex.de/  (tweaked for IntelliJ platform)
// source: polyglotQuery.flex

package com.intellij.idea.plugin.hybris.polyglotQuery;

import com.intellij.lexer.FlexLexer;
import com.intellij.psi.tree.IElementType;

import static com.intellij.psi.TokenType.BAD_CHARACTER;
import static com.intellij.psi.TokenType.WHITE_SPACE;
import static com.intellij.idea.plugin.hybris.polyglotQuery.psi.PolyglotQueryTypes.*;


public class _PolyglotQueryLexer implements FlexLexer {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int GET_STATE = 2;
  public static final int ATTRIBUTE_STATE = 4;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2, 2
  };

  /**
   * Top-level table for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_TOP = zzUnpackcmap_top();

  private static final String ZZ_CMAP_TOP_PACKED_0 =
    "\1\0\1\u0100\1\u0200\1\u0300\1\u0400\1\u0500\1\u0600\1\u0700"+
    "\1\u0800\1\u0900\1\u0a00\1\u0b00\1\u0c00\1\u0d00\1\u0e00\1\u0f00"+
    "\1\u1000\1\u1100\1\u1200\1\u1300\1\u1400\1\u1100\1\u1500\1\u1600"+
    "\1\u1700\1\u1800\1\u1900\1\u1a00\1\u1b00\1\u1c00\1\u1100\1\u1d00"+
    "\1\u1e00\1\u1f00\12\u2000\1\u2100\1\u2200\1\u2300\1\u2000\1\u2400"+
    "\1\u2500\2\u2000\31\u1100\1\u2600\121\u1100\1\u2700\4\u1100\1\u2800"+
    "\1\u1100\1\u2900\1\u2a00\1\u2b00\1\u2c00\1\u2d00\1\u2e00\53\u1100"+
    "\1\u2f00\41\u2000\1\u1100\1\u3000\1\u3100\1\u1100\1\u3200\1\u3300"+
    "\1\u3400\1\u3500\1\u2000\1\u3600\1\u3700\1\u3800\1\u3900\1\u1100"+
    "\1\u3a00\1\u3b00\1\u3c00\1\u3d00\1\u3e00\1\u3f00\1\u4000\1\u2000"+
    "\1\u4100\1\u4200\1\u4300\1\u4400\1\u4500\1\u4600\1\u4700\1\u4800"+
    "\1\u4900\1\u4a00\1\u4b00\1\u4c00\1\u2000\1\u4d00\1\u4e00\1\u4f00"+
    "\1\u2000\3\u1100\1\u5000\1\u5100\1\u5200\12\u2000\4\u1100\1\u5300"+
    "\17\u2000\2\u1100\1\u5400\41\u2000\2\u1100\1\u5500\1\u5600\2\u2000"+
    "\1\u5700\1\u5800\27\u1100\1\u5900\2\u1100\1\u5a00\45\u2000\1\u1100"+
    "\1\u5b00\1\u5c00\11\u2000\1\u5d00\27\u2000\1\u5e00\1\u5f00\1\u6000"+
    "\1\u6100\11\u2000\1\u6200\1\u6300\5\u2000\1\u6400\1\u6500\4\u2000"+
    "\1\u6600\21\u2000\246\u1100\1\u6700\20\u1100\1\u6800\1\u6900\25\u1100"+
    "\1\u6a00\34\u1100\1\u6b00\14\u2000\2\u1100\1\u6c00\u0e05\u2000";

  private static int [] zzUnpackcmap_top() {
    int [] result = new int[4352];
    int offset = 0;
    offset = zzUnpackcmap_top(ZZ_CMAP_TOP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_top(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Second-level tables for translating characters to character classes
   */
  private static final int [] ZZ_CMAP_BLOCKS = zzUnpackcmap_blocks();

  private static final String ZZ_CMAP_BLOCKS_PACKED_0 =
    "\11\0\1\1\1\2\3\1\22\0\1\1\5\0\1\3"+
    "\1\0\1\4\1\5\1\6\1\0\1\7\1\10\1\11"+
    "\1\12\12\13\2\0\1\14\1\15\1\16\1\17\1\0"+
    "\1\20\1\21\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\2\25\1\31\1\25\1\32\1\33\2\25\1\34"+
    "\1\35\1\36\1\37\1\25\1\40\1\25\1\41\1\25"+
    "\1\42\1\0\1\43\1\0\1\13\1\0\1\20\1\21"+
    "\1\22\1\23\1\24\1\25\1\26\1\27\1\30\2\25"+
    "\1\31\1\25\1\32\1\33\2\25\1\44\1\35\1\36"+
    "\1\37\1\25\1\40\1\25\1\41\1\25\1\45\1\0"+
    "\1\46\7\0\1\1\32\0\1\1\11\0\1\25\12\0"+
    "\1\25\4\0\1\25\5\0\27\25\1\0\37\25\1\0"+
    "\70\25\2\30\115\25\1\35\u0142\25\4\0\14\25\16\0"+
    "\5\25\7\0\1\25\1\0\1\25\201\0\5\25\1\0"+
    "\2\25\2\0\4\25\1\0\1\25\6\0\1\25\1\0"+
    "\3\25\1\0\1\25\1\0\24\25\1\0\123\25\1\0"+
    "\213\25\10\0\246\25\1\0\46\25\2\0\1\25\6\0"+
    "\51\25\107\0\33\25\4\0\4\25\55\0\53\25\25\0"+
    "\12\13\4\0\2\25\1\0\143\25\1\0\1\25\17\0"+
    "\2\25\7\0\2\25\12\13\3\25\2\0\1\25\20\0"+
    "\1\25\1\0\36\25\35\0\131\25\13\0\1\25\16\0"+
    "\12\13\41\25\11\0\2\25\4\0\1\25\5\0\26\25"+
    "\4\0\1\25\11\0\1\25\3\0\1\25\27\0\31\25"+
    "\7\0\13\25\65\0\25\25\1\0\10\25\106\0\66\25"+
    "\3\0\1\25\22\0\1\25\7\0\12\25\4\0\12\13"+
    "\1\0\20\25\4\0\10\25\2\0\2\25\2\0\26\25"+
    "\1\0\7\25\1\0\1\25\3\0\4\25\3\0\1\25"+
    "\20\0\1\25\15\0\2\25\1\0\3\25\4\0\12\13"+
    "\2\25\12\0\1\25\10\0\6\25\4\0\2\25\2\0"+
    "\26\25\1\0\7\25\1\0\2\25\1\0\2\25\1\0"+
    "\2\25\37\0\4\25\1\0\1\25\7\0\12\13\2\0"+
    "\3\25\20\0\11\25\1\0\3\25\1\0\26\25\1\0"+
    "\7\25\1\0\2\25\1\0\5\25\3\0\1\25\22\0"+
    "\1\25\17\0\2\25\4\0\12\13\11\0\1\25\13\0"+
    "\10\25\2\0\2\25\2\0\26\25\1\0\7\25\1\0"+
    "\2\25\1\0\5\25\3\0\1\25\36\0\2\25\1\0"+
    "\3\25\4\0\12\13\1\0\1\25\21\0\1\25\1\0"+
    "\6\25\3\0\3\25\1\0\4\25\3\0\2\25\1\0"+
    "\1\25\1\0\2\25\3\0\2\25\3\0\3\25\3\0"+
    "\14\25\26\0\1\25\25\0\12\13\25\0\10\25\1\0"+
    "\3\25\1\0\27\25\1\0\20\25\3\0\1\25\32\0"+
    "\3\25\5\0\2\25\4\0\12\13\20\0\1\25\4\0"+
    "\10\25\1\0\3\25\1\0\27\25\1\0\12\25\1\0"+
    "\5\25\3\0\1\25\40\0\1\25\1\0\2\25\4\0"+
    "\12\13\1\0\2\25\22\0\10\25\1\0\3\25\1\0"+
    "\51\25\2\0\1\25\20\0\1\25\5\0\3\25\10\0"+
    "\3\25\4\0\12\13\12\0\6\25\5\0\22\25\3\0"+
    "\30\25\1\0\11\25\1\0\1\25\2\0\7\25\37\0"+
    "\12\13\21\0\60\25\1\0\2\25\14\0\7\25\11\0"+
    "\12\13\47\0\2\25\1\0\1\25\1\0\5\25\1\0"+
    "\30\25\1\0\1\25\1\0\12\25\1\0\2\25\11\0"+
    "\1\25\2\0\5\25\1\0\1\25\11\0\12\13\2\0"+
    "\4\25\40\0\1\25\37\0\12\13\26\0\10\25\1\0"+
    "\44\25\33\0\5\25\163\0\53\25\24\0\1\25\12\13"+
    "\6\0\6\25\4\0\4\25\3\0\1\25\3\0\2\25"+
    "\7\0\3\25\4\0\15\25\14\0\1\25\1\0\12\13"+
    "\6\0\46\25\1\0\1\25\5\0\1\25\2\0\53\25"+
    "\1\0\u014d\25\1\0\4\25\2\0\7\25\1\0\1\25"+
    "\1\0\4\25\2\0\51\25\1\0\4\25\2\0\41\25"+
    "\1\0\4\25\2\0\7\25\1\0\1\25\1\0\4\25"+
    "\2\0\17\25\1\0\71\25\1\0\4\25\2\0\103\25"+
    "\45\0\20\25\20\0\126\25\2\0\6\25\3\0\u016c\25"+
    "\2\0\21\25\1\1\32\25\5\0\113\25\6\0\10\25"+
    "\7\0\15\25\1\0\4\25\16\0\22\25\16\0\22\25"+
    "\16\0\15\25\1\0\3\25\17\0\64\25\43\0\1\25"+
    "\4\0\1\25\3\0\12\13\46\0\12\13\6\0\131\25"+
    "\7\0\5\25\2\0\42\25\1\0\1\25\5\0\106\25"+
    "\12\0\37\25\47\0\12\13\36\25\2\0\5\25\13\0"+
    "\54\25\4\0\32\25\6\0\12\13\46\0\27\25\11\0"+
    "\65\25\53\0\12\13\6\0\12\13\15\0\1\25\135\0"+
    "\57\25\21\0\7\25\4\0\12\13\51\0\36\25\15\0"+
    "\2\25\12\13\54\25\32\0\44\25\34\0\12\13\3\0"+
    "\3\25\12\13\44\25\2\0\11\25\7\0\53\25\2\0"+
    "\3\25\51\0\4\25\1\0\6\25\1\0\2\25\3\0"+
    "\1\25\5\0\300\25\100\0\26\25\2\0\6\25\2\0"+
    "\46\25\2\0\6\25\2\0\10\25\1\0\1\25\1\0"+
    "\1\25\1\0\1\25\1\0\37\25\2\0\65\25\1\0"+
    "\7\25\1\0\1\25\3\0\3\25\1\0\7\25\3\0"+
    "\4\25\2\0\6\25\4\0\15\25\5\0\3\25\1\0"+
    "\7\25\3\0\13\1\35\0\2\1\5\0\1\1\57\0"+
    "\1\1\21\0\1\25\15\0\1\25\20\0\15\25\145\0"+
    "\1\25\4\0\1\25\2\0\12\25\1\0\1\25\3\0"+
    "\5\25\6\0\1\25\1\0\1\25\1\0\1\25\1\0"+
    "\4\25\1\0\13\25\2\0\4\25\5\0\5\25\4\0"+
    "\1\25\64\0\2\25\u017b\0\57\25\1\0\57\25\1\0"+
    "\205\25\6\0\4\25\3\0\2\25\14\0\46\25\1\0"+
    "\1\25\5\0\1\25\2\0\70\25\7\0\1\25\20\0"+
    "\27\25\11\0\7\25\1\0\7\25\1\0\7\25\1\0"+
    "\7\25\1\0\7\25\1\0\7\25\1\0\7\25\1\0"+
    "\7\25\120\0\1\25\320\0\1\1\4\0\2\25\52\0"+
    "\5\25\5\0\2\25\4\0\126\25\6\0\3\25\1\0"+
    "\132\25\1\0\4\25\5\0\53\25\1\0\136\25\21\0"+
    "\33\25\65\0\306\25\112\0\360\25\20\0\215\25\103\0"+
    "\56\25\2\0\15\25\3\0\20\25\12\13\2\25\24\0"+
    "\57\25\20\0\37\25\2\0\106\25\61\0\11\25\2\0"+
    "\147\25\2\0\65\25\2\0\5\25\60\0\13\25\1\0"+
    "\3\25\1\0\4\25\1\0\27\25\35\0\64\25\16\0"+
    "\62\25\34\0\12\13\30\0\6\25\3\0\1\25\1\0"+
    "\2\25\1\0\12\13\34\25\12\0\27\25\31\0\35\25"+
    "\7\0\57\25\34\0\1\25\12\13\6\0\5\25\1\0"+
    "\12\25\12\13\5\25\1\0\51\25\27\0\3\25\1\0"+
    "\10\25\4\0\12\13\6\0\27\25\3\0\1\25\3\0"+
    "\62\25\1\0\1\25\3\0\2\25\2\0\5\25\2\0"+
    "\1\25\1\0\1\25\30\0\3\25\2\0\13\25\7\0"+
    "\3\25\14\0\6\25\2\0\6\25\2\0\6\25\11\0"+
    "\7\25\1\0\7\25\1\0\53\25\1\0\14\25\10\0"+
    "\163\25\15\0\12\13\6\0\244\25\14\0\27\25\4\0"+
    "\61\25\4\0\156\25\2\0\152\25\46\0\7\25\14\0"+
    "\5\25\5\0\1\25\1\0\12\25\1\0\15\25\1\0"+
    "\5\25\1\0\1\25\1\0\2\25\1\0\2\25\1\0"+
    "\154\25\41\0\153\25\22\0\100\25\2\0\66\25\50\0"+
    "\14\25\164\0\5\25\1\0\207\25\23\0\12\13\7\0"+
    "\32\25\6\0\32\25\13\0\131\25\3\0\6\25\2\0"+
    "\6\25\2\0\6\25\2\0\3\25\43\0\14\25\1\0"+
    "\32\25\1\0\23\25\1\0\2\25\1\0\17\25\2\0"+
    "\16\25\42\0\173\25\205\0\35\25\3\0\61\25\57\0"+
    "\40\25\15\0\24\25\1\0\10\25\6\0\46\25\12\0"+
    "\36\25\2\0\44\25\4\0\10\25\60\0\236\25\2\0"+
    "\12\13\6\0\44\25\4\0\44\25\4\0\50\25\10\0"+
    "\64\25\234\0\67\25\11\0\26\25\12\0\10\25\230\0"+
    "\6\25\2\0\1\25\1\0\54\25\1\0\2\25\3\0"+
    "\1\25\2\0\27\25\12\0\27\25\11\0\37\25\101\0"+
    "\23\25\1\0\2\25\12\0\26\25\12\0\32\25\106\0"+
    "\70\25\6\0\2\25\100\0\1\25\17\0\4\25\1\0"+
    "\3\25\1\0\35\25\52\0\35\25\3\0\35\25\43\0"+
    "\10\25\1\0\34\25\33\0\66\25\12\0\26\25\12\0"+
    "\23\25\15\0\22\25\156\0\111\25\67\0\63\25\15\0"+
    "\63\25\15\0\44\25\14\0\12\13\306\0\35\25\12\0"+
    "\1\25\10\0\26\25\232\0\27\25\14\0\65\25\56\0"+
    "\12\13\23\0\55\25\40\0\31\25\7\0\12\13\11\0"+
    "\44\25\17\0\12\13\4\0\1\25\13\0\43\25\3\0"+
    "\1\25\14\0\60\25\16\0\4\25\13\0\12\13\1\25"+
    "\1\0\1\25\43\0\22\25\1\0\31\25\124\0\7\25"+
    "\1\0\1\25\1\0\4\25\1\0\17\25\1\0\12\25"+
    "\7\0\57\25\21\0\12\13\13\0\10\25\2\0\2\25"+
    "\2\0\26\25\1\0\7\25\1\0\2\25\1\0\5\25"+
    "\3\0\1\25\22\0\1\25\14\0\5\25\236\0\65\25"+
    "\22\0\4\25\5\0\12\13\5\0\1\25\40\0\60\25"+
    "\24\0\2\25\1\0\1\25\10\0\12\13\246\0\57\25"+
    "\51\0\4\25\44\0\60\25\24\0\1\25\13\0\12\13"+
    "\46\0\53\25\15\0\1\25\7\0\12\13\66\0\33\25"+
    "\25\0\12\13\306\0\54\25\164\0\100\25\12\13\25\0"+
    "\1\25\240\0\10\25\2\0\47\25\20\0\1\25\1\0"+
    "\1\25\34\0\1\25\12\0\50\25\7\0\1\25\25\0"+
    "\1\25\13\0\56\25\23\0\1\25\42\0\71\25\7\0"+
    "\11\25\1\0\45\25\21\0\1\25\17\0\12\13\30\0"+
    "\36\25\160\0\7\25\1\0\2\25\1\0\46\25\25\0"+
    "\1\25\11\0\12\13\6\0\6\25\1\0\2\25\1\0"+
    "\40\25\16\0\1\25\7\0\12\13\u0136\0\23\25\15\0"+
    "\232\25\346\0\304\25\274\0\57\25\321\0\107\25\271\0"+
    "\71\25\7\0\37\25\1\0\12\13\146\0\36\25\22\0"+
    "\60\25\20\0\4\25\14\0\12\13\11\0\25\25\5\0"+
    "\23\25\260\0\100\25\200\0\113\25\5\0\1\25\102\0"+
    "\15\25\100\0\2\25\1\0\1\25\34\0\370\25\10\0"+
    "\363\25\15\0\37\25\61\0\3\25\21\0\4\25\10\0"+
    "\u018c\25\4\0\153\25\5\0\15\25\3\0\11\25\7\0"+
    "\12\25\146\0\125\25\1\0\107\25\1\0\2\25\2\0"+
    "\1\25\2\0\2\25\2\0\4\25\1\0\14\25\1\0"+
    "\1\25\1\0\7\25\1\0\101\25\1\0\4\25\2\0"+
    "\10\25\1\0\7\25\1\0\34\25\1\0\4\25\1\0"+
    "\5\25\1\0\1\25\3\0\7\25\1\0\u0154\25\2\0"+
    "\31\25\1\0\31\25\1\0\37\25\1\0\31\25\1\0"+
    "\37\25\1\0\31\25\1\0\37\25\1\0\31\25\1\0"+
    "\37\25\1\0\31\25\1\0\10\25\2\0\62\13\55\25"+
    "\12\0\7\25\2\0\12\13\4\0\1\25\u0171\0\54\25"+
    "\4\0\12\13\6\0\305\25\73\0\104\25\7\0\1\25"+
    "\4\0\12\13\246\0\4\25\1\0\33\25\1\0\2\25"+
    "\1\0\1\25\2\0\1\25\1\0\12\25\1\0\4\25"+
    "\1\0\1\25\1\0\1\25\6\0\1\25\4\0\1\25"+
    "\1\0\1\25\1\0\1\25\1\0\3\25\1\0\2\25"+
    "\1\0\1\25\2\0\1\25\1\0\1\25\1\0\1\25"+
    "\1\0\1\25\1\0\1\25\1\0\2\25\1\0\1\25"+
    "\2\0\4\25\1\0\7\25\1\0\4\25\1\0\4\25"+
    "\1\0\1\25\1\0\12\25\1\0\21\25\5\0\3\25"+
    "\1\0\5\25\1\0\21\25\104\0\327\25\51\0\65\25"+
    "\13\0\336\25\2\0\u0182\25\16\0\u0131\25\37\0\36\25"+
    "\342\0";

  private static int [] zzUnpackcmap_blocks() {
    int [] result = new int[27904];
    int offset = 0;
    offset = zzUnpackcmap_blocks(ZZ_CMAP_BLOCKS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackcmap_blocks(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\1\1\1\2\1\3\1\4\1\5\1\6\1\1"+
    "\1\7\1\1\1\10\1\11\1\12\1\13\11\14\1\15"+
    "\1\16\1\17\1\20\1\21\1\22\1\23\1\24\1\25"+
    "\1\26\1\27\2\14\1\30\2\14\1\31\2\14\1\32"+
    "\1\14\1\24\1\33\1\34\1\14\1\35\1\36\3\14"+
    "\1\0\1\24\1\37\1\40\2\14\1\41\1\42";

  private static int [] zzUnpackAction() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\47\0\116\0\165\0\234\0\165\0\165\0\165"+
    "\0\165\0\303\0\165\0\352\0\u0111\0\165\0\u0138\0\165"+
    "\0\u015f\0\u0186\0\u01ad\0\u01d4\0\u01fb\0\u0222\0\u0249\0\u0270"+
    "\0\u0297\0\165\0\165\0\165\0\165\0\165\0\165\0\u02be"+
    "\0\u02e5\0\165\0\165\0\165\0\u030c\0\u0333\0\u01ad\0\u035a"+
    "\0\u0381\0\u01ad\0\u03a8\0\u03cf\0\u03f6\0\u041d\0\u0444\0\u01ad"+
    "\0\u01ad\0\u046b\0\u01ad\0\u01ad\0\u0492\0\u04b9\0\u04e0\0\u0444"+
    "\0\165\0\u01ad\0\u01ad\0\u0507\0\u052e\0\u01ad\0\u01ad";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length() - 1;
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpacktrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\2\5\1\6\1\7\1\10\1\4\1\11\1\12"+
    "\1\13\1\14\1\4\1\15\1\16\1\17\1\20\1\21"+
    "\1\22\1\23\1\24\2\23\1\25\1\23\1\26\1\23"+
    "\1\27\1\30\4\23\1\31\1\23\1\32\1\33\1\23"+
    "\1\34\1\35\1\4\2\5\5\4\1\12\1\4\1\14"+
    "\5\4\22\23\2\4\1\23\1\36\1\37\1\4\2\5"+
    "\5\4\1\12\1\4\1\14\5\4\22\23\1\32\1\33"+
    "\1\23\1\4\1\37\50\0\2\5\54\0\1\40\44\0"+
    "\1\41\55\0\1\42\1\43\45\0\1\44\44\0\1\23"+
    "\4\0\12\23\1\45\2\23\1\46\4\23\2\0\1\23"+
    "\15\0\1\23\4\0\21\23\1\47\2\0\1\23\15\0"+
    "\1\23\4\0\22\23\2\0\1\23\15\0\1\23\4\0"+
    "\4\23\1\50\15\23\2\0\1\23\15\0\1\23\4\0"+
    "\4\23\1\51\15\23\2\0\1\23\15\0\1\23\4\0"+
    "\15\23\1\52\4\23\2\0\1\23\15\0\1\23\4\0"+
    "\13\23\1\53\3\23\1\54\2\23\2\0\1\23\15\0"+
    "\1\23\4\0\14\23\1\55\5\23\2\0\1\55\15\0"+
    "\1\23\4\0\7\23\1\56\12\23\2\0\1\23\2\0"+
    "\2\40\1\0\41\40\1\0\2\40\6\41\1\57\40\41"+
    "\13\0\1\23\4\0\3\23\1\60\16\23\2\0\1\23"+
    "\15\0\1\23\4\0\2\23\1\61\17\23\2\0\1\23"+
    "\15\0\1\23\4\0\15\23\1\62\4\23\2\0\1\23"+
    "\15\0\1\23\4\0\16\23\1\63\3\23\2\0\1\23"+
    "\15\0\1\23\4\0\16\23\1\64\3\23\2\0\1\23"+
    "\15\0\1\23\4\0\11\23\1\65\10\23\2\0\1\23"+
    "\15\0\1\23\4\0\3\23\1\66\16\23\2\0\1\23"+
    "\15\0\1\23\4\0\4\23\1\67\15\23\2\0\1\23"+
    "\2\0\6\41\1\70\3\41\1\71\34\41\13\0\1\23"+
    "\4\0\2\23\1\72\17\23\2\0\1\23\15\0\1\23"+
    "\4\0\11\23\1\73\10\23\2\0\1\23\15\0\1\23"+
    "\4\0\4\23\1\74\15\23\2\0\1\23\15\0\1\23"+
    "\4\0\14\23\1\75\5\23\2\0\1\75\15\0\1\23"+
    "\4\0\14\23\1\76\5\23\2\0\1\76\15\0\1\23"+
    "\4\0\4\23\1\77\15\23\2\0\1\23\2\0";

  private static int [] zzUnpacktrans() {
    int [] result = new int[1365];
    int offset = 0;
    offset = zzUnpacktrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpacktrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String[] ZZ_ERROR_MSG = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state {@code aState}
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\1\1\4\11\1\1\1\11\2\1\1\11"+
    "\1\1\1\11\11\1\6\11\2\1\3\11\23\1\1\0"+
    "\1\11\6\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[63];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private CharSequence zzBuffer = "";

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** Number of newlines encountered up to the start of the matched text. */
  @SuppressWarnings("unused")
  private int yyline;

  /** Number of characters from the last newline up to the start of the matched text. */
  @SuppressWarnings("unused")
  protected int yycolumn;

  /** Number of characters up to the start of the matched text. */
  @SuppressWarnings("unused")
  private long yychar;

  /** Whether the scanner is currently at the beginning of a line. */
  @SuppressWarnings("unused")
  private boolean zzAtBOL = true;

  /** Whether the user-EOF-code has already been executed. */
  @SuppressWarnings("unused")
  private boolean zzEOFDone;

  /* user code: */
  public _PolyglotQueryLexer() {
    this((java.io.Reader)null);
  }


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public _PolyglotQueryLexer(java.io.Reader in) {
    this.zzReader = in;
  }


  /** Returns the maximum size of the scanner buffer, which limits the size of tokens. */
  private int zzMaxBufferLen() {
    return Integer.MAX_VALUE;
  }

  /**  Whether the scanner buffer can grow to accommodate a larger token. */
  private boolean zzCanGrow() {
    return true;
  }

  /**
   * Translates raw input code points to DFA table row
   */
  private static int zzCMap(int input) {
    int offset = input & 255;
    return offset == input ? ZZ_CMAP_BLOCKS[offset] : ZZ_CMAP_BLOCKS[ZZ_CMAP_TOP[input >> 8] | offset];
  }

  public final int getTokenStart() {
    return zzStartRead;
  }

  public final int getTokenEnd() {
    return getTokenStart() + yylength();
  }

  public void reset(CharSequence buffer, int start, int end, int initialState) {
    zzBuffer = buffer;
    zzCurrentPos = zzMarkedPos = zzStartRead = start;
    zzAtEOF  = false;
    zzAtBOL = true;
    zzEndRead = end;
    yybegin(initialState);
  }

  /**
   * Refills the input buffer.
   *
   * @return      {@code false}, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {
    return true;
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final CharSequence yytext() {
    return zzBuffer.subSequence(zzStartRead, zzMarkedPos);
  }


  /**
   * Returns the character at position {@code pos} from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer.charAt(zzStartRead+pos);
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occurred while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public IElementType advance() throws java.io.IOException
  {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    CharSequence zzBufferL = zzBuffer;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMap(zzInput) ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
        return null;
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            { return BAD_CHARACTER;
            }
          // fall through
          case 35: break;
          case 2:
            { return WHITE_SPACE;
            }
          // fall through
          case 36: break;
          case 3:
            { return AMP;
            }
          // fall through
          case 37: break;
          case 4:
            { return LPAREN;
            }
          // fall through
          case 38: break;
          case 5:
            { return RPAREN;
            }
          // fall through
          case 39: break;
          case 6:
            { return COMMA;
            }
          // fall through
          case 40: break;
          case 7:
            { return DOT;
            }
          // fall through
          case 41: break;
          case 8:
            { return LT;
            }
          // fall through
          case 42: break;
          case 9:
            { return EQ;
            }
          // fall through
          case 43: break;
          case 10:
            { return GT;
            }
          // fall through
          case 44: break;
          case 11:
            { return QUESTION_MARK;
            }
          // fall through
          case 45: break;
          case 12:
            { return IDENTIFIER;
            }
          // fall through
          case 46: break;
          case 13:
            { return LBRACKET;
            }
          // fall through
          case 47: break;
          case 14:
            { return RBRACKET;
            }
          // fall through
          case 48: break;
          case 15:
            { yybegin(ATTRIBUTE_STATE); return LBRACE;
            }
          // fall through
          case 49: break;
          case 16:
            { return RBRACE;
            }
          // fall through
          case 50: break;
          case 17:
            { return LBRACE;
            }
          // fall through
          case 51: break;
          case 18:
            { yybegin(YYINITIAL); return RBRACE;
            }
          // fall through
          case 52: break;
          case 19:
            { return LINE_COMMENT;
            }
          // fall through
          case 53: break;
          case 20:
            { return COMMENT;
            }
          // fall through
          case 54: break;
          case 21:
            { return LTE;
            }
          // fall through
          case 55: break;
          case 22:
            { return UNEQ;
            }
          // fall through
          case 56: break;
          case 23:
            { return GTE;
            }
          // fall through
          case 57: break;
          case 24:
            { return BY;
            }
          // fall through
          case 58: break;
          case 25:
            { return IS;
            }
          // fall through
          case 59: break;
          case 26:
            { return OR;
            }
          // fall through
          case 60: break;
          case 27:
            { return AND;
            }
          // fall through
          case 61: break;
          case 28:
            { return ASC;
            }
          // fall through
          case 62: break;
          case 29:
            { yybegin(GET_STATE); return GET;
            }
          // fall through
          case 63: break;
          case 30:
            { return NOT;
            }
          // fall through
          case 64: break;
          case 31:
            { return DESC;
            }
          // fall through
          case 65: break;
          case 32:
            { return NULL;
            }
          // fall through
          case 66: break;
          case 33:
            { return ORDER;
            }
          // fall through
          case 67: break;
          case 34:
            { return WHERE;
            }
          // fall through
          case 68: break;
          default:
            zzScanError(ZZ_NO_MATCH);
          }
      }
    }
  }


}
